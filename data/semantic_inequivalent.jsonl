{"sql1": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "sql2": "SELECT T1.Name, T1.Song_release_year FROM singer AS T1 ORDER BY T1.Age ASC LIMIT 1", "semantic equivalence": false, "schema": "{\"concert_singer\":{\"tables\":{\"concert\":{\"columns\":\"*, concert_ID, concert_Name, Theme, Stadium_ID, Year\"},\"singer\":{\"columns\":\"*, Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male\"},\"singer_in_concert\":{\"columns\":\"*, concert_ID, Singer_ID\"},\"stadium\":{\"columns\":\"*, Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average\"}},\"foreign_keys\":\"concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID\",\"primary_keys\":\"stadium.Stadium_ID,singer.Singer_ID,concert.concert_ID,singer_in_concert.concert_ID\"}}"}
{"sql1": "select max(capacity), average from stadium", "sql2": "SELECT max(Capacity) , avg(Capacity) FROM stadium", "semantic equivalence": false, "schema": "{\"concert_singer\":{\"tables\":{\"concert\":{\"columns\":\"*, concert_ID, concert_Name, Theme, Stadium_ID, Year\"},\"singer\":{\"columns\":\"*, Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male\"},\"singer_in_concert\":{\"columns\":\"*, concert_ID, Singer_ID\"},\"stadium\":{\"columns\":\"*, Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average\"}},\"foreign_keys\":\"concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID\",\"primary_keys\":\"stadium.Stadium_ID,singer.Singer_ID,concert.concert_ID,singer_in_concert.concert_ID\"}}"}
{"sql1": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "sql2": "SELECT \"Name\" FROM singer WHERE \"Singer_ID\" IN (SELECT \"Singer_ID\" FROM singer_in_concert WHERE \"concert_ID\" IN (SELECT \"concert_ID\" FROM concert WHERE \"Year\" = '2014'))", "semantic equivalence": false, "schema": "{\"concert_singer\":{\"tables\":{\"concert\":{\"columns\":\"*, concert_ID, concert_Name, Theme, Stadium_ID, Year\"},\"singer\":{\"columns\":\"*, Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male\"},\"singer_in_concert\":{\"columns\":\"*, concert_ID, Singer_ID\"},\"stadium\":{\"columns\":\"*, Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average\"}},\"foreign_keys\":\"concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID\",\"primary_keys\":\"stadium.Stadium_ID,singer.Singer_ID,concert.concert_ID,singer_in_concert.concert_ID\"}}"}
{"sql1": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "sql2": "SELECT count(*) FROM student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'Dog' AND T1.Sex = 'F'", "semantic equivalence": false, "schema": "{\"pets_1\":{\"tables\":{\"Has_Pet\":{\"columns\":\"*, StuID, PetID\"},\"Pets\":{\"columns\":\"*, PetID, PetType, pet_age, weight\"},\"Student\":{\"columns\":\"*, StuID, LName, Fname, Age, Sex, Major, Advisor, city_code\"}},\"foreign_keys\":\"Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID\",\"primary_keys\":\"Student.StuID,Pets.PetID\"}}"}
{"sql1": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'", "sql2": "SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = \"Cat\" OR T3.PetType = \"Dog\"", "semantic equivalence": false, "schema": "{\"pets_1\":{\"tables\":{\"Has_Pet\":{\"columns\":\"*, StuID, PetID\"},\"Pets\":{\"columns\":\"*, PetID, PetType, pet_age, weight\"},\"Student\":{\"columns\":\"*, StuID, LName, Fname, Age, Sex, Major, Advisor, city_code\"}},\"foreign_keys\":\"Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID\",\"primary_keys\":\"Student.StuID,Pets.PetID\"}}"}
{"sql1": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "sql2": "SELECT Major , Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'Cat')", "semantic equivalence": false, "schema": "{\"pets_1\":{\"tables\":{\"Has_Pet\":{\"columns\":\"*, StuID, PetID\"},\"Pets\":{\"columns\":\"*, PetID, PetType, pet_age, weight\"},\"Student\":{\"columns\":\"*, StuID, LName, Fname, Age, Sex, Major, Advisor, city_code\"}},\"foreign_keys\":\"Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID\",\"primary_keys\":\"Student.StuID,Pets.PetID\"}}"}
{"sql1": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'", "sql2": "SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'Cat')", "semantic equivalence": false, "schema": "{\"pets_1\":{\"tables\":{\"Has_Pet\":{\"columns\":\"*, StuID, PetID\"},\"Pets\":{\"columns\":\"*, PetID, PetType, pet_age, weight\"},\"Student\":{\"columns\":\"*, StuID, LName, Fname, Age, Sex, Major, Advisor, city_code\"}},\"foreign_keys\":\"Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID\",\"primary_keys\":\"Student.StuID,Pets.PetID\"}}"}
{"sql1": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "sql2": "SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'Dog')) AND StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'Cat'))", "semantic equivalence": false, "schema": "{\"pets_1\":{\"tables\":{\"Has_Pet\":{\"columns\":\"*, StuID, PetID\"},\"Pets\":{\"columns\":\"*, PetID, PetType, pet_age, weight\"},\"Student\":{\"columns\":\"*, StuID, LName, Fname, Age, Sex, Major, Advisor, city_code\"}},\"foreign_keys\":\"Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID\",\"primary_keys\":\"Student.StuID,Pets.PetID\"}}"}
{"sql1": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "sql2": "SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'Dog') AND StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'Cat')", "semantic equivalence": false, "schema": "{\"pets_1\":{\"tables\":{\"Has_Pet\":{\"columns\":\"*, StuID, PetID\"},\"Pets\":{\"columns\":\"*, PetID, PetType, pet_age, weight\"},\"Student\":{\"columns\":\"*, StuID, LName, Fname, Age, Sex, Major, Advisor, city_code\"}},\"foreign_keys\":\"Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID\",\"primary_keys\":\"Student.StuID,Pets.PetID\"}}"}
{"sql1": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "sql2": "SELECT Fname, Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID", "semantic equivalence": false, "schema": "{\"pets_1\":{\"tables\":{\"Has_Pet\":{\"columns\":\"*, StuID, PetID\"},\"Pets\":{\"columns\":\"*, PetID, PetType, pet_age, weight\"},\"Student\":{\"columns\":\"*, StuID, LName, Fname, Age, Sex, Major, Advisor, city_code\"}},\"foreign_keys\":\"Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID\",\"primary_keys\":\"Student.StuID,Pets.PetID\"}}"}
{"sql1": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;", "sql2": "SELECT Model FROM model_list WHERE ModelId = ( SELECT Id FROM cars_data ORDER BY Horsepower ASC LIMIT 1 );", "semantic equivalence": false, "schema": "{\"car_1\":{\"tables\":{\"car_makers\":{\"columns\":\"*, Id, Maker, FullName, Country\"},\"car_names\":{\"columns\":\"*, MakeId, Model, Make\"},\"cars_data\":{\"columns\":\"*, Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year\"},\"continents\":{\"columns\":\"*, ContId, Continent\"},\"countries\":{\"columns\":\"*, CountryId, CountryName, Continent\"},\"model_list\":{\"columns\":\"*, ModelId, Maker, Model\"}},\"foreign_keys\":\"countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId\",\"primary_keys\":\"continents.ContId,countries.CountryId,car_makers.Id,model_list.ModelId,car_names.MakeId,cars_data.Id\"}}"}
{"sql1": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;", "sql2": "SELECT model FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Country IN (SELECT CountryId FROM countries WHERE CountryName = (SELECT Horsepower FROM cars_data ORDER BY Horsepower ASC LIMIT 1)));", "semantic equivalence": false, "schema": "{\"car_1\":{\"tables\":{\"car_makers\":{\"columns\":\"*, Id, Maker, FullName, Country\"},\"car_names\":{\"columns\":\"*, MakeId, Model, Make\"},\"cars_data\":{\"columns\":\"*, Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year\"},\"continents\":{\"columns\":\"*, ContId, Continent\"},\"countries\":{\"columns\":\"*, CountryId, CountryName, Continent\"},\"model_list\":{\"columns\":\"*, ModelId, Maker, Model\"}},\"foreign_keys\":\"countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId\",\"primary_keys\":\"continents.ContId,countries.CountryId,car_makers.Id,model_list.ModelId,car_names.MakeId,cars_data.Id\"}}"}
{"sql1": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)", "sql2": "SELECT model FROM cars_data AS T1 JOIN model_list AS T2 ON T1.id = T2.ModelId WHERE weight < (SELECT avg(weight) FROM cars_data)", "semantic equivalence": false, "schema": "{\"car_1\":{\"tables\":{\"car_makers\":{\"columns\":\"*, Id, Maker, FullName, Country\"},\"car_names\":{\"columns\":\"*, MakeId, Model, Make\"},\"cars_data\":{\"columns\":\"*, Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year\"},\"continents\":{\"columns\":\"*, ContId, Continent\"},\"countries\":{\"columns\":\"*, CountryId, CountryName, Continent\"},\"model_list\":{\"columns\":\"*, ModelId, Maker, Model\"}},\"foreign_keys\":\"countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId\",\"primary_keys\":\"continents.ContId,countries.CountryId,car_makers.Id,model_list.ModelId,car_names.MakeId,cars_data.Id\"}}"}
{"sql1": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';", "sql2": "SELECT car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = 1970", "semantic equivalence": false, "schema": "{\"car_1\":{\"tables\":{\"car_makers\":{\"columns\":\"*, Id, Maker, FullName, Country\"},\"car_names\":{\"columns\":\"*, MakeId, Model, Make\"},\"cars_data\":{\"columns\":\"*, Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year\"},\"continents\":{\"columns\":\"*, ContId, Continent\"},\"countries\":{\"columns\":\"*, CountryId, CountryName, Continent\"},\"model_list\":{\"columns\":\"*, ModelId, Maker, Model\"}},\"foreign_keys\":\"countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId\",\"primary_keys\":\"continents.ContId,countries.CountryId,car_makers.Id,model_list.ModelId,car_names.MakeId,cars_data.Id\"}}"}
{"sql1": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';", "sql2": "SELECT DISTINCT T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.ModelId = T3.MakeId JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T4.Year = 1970", "semantic equivalence": false, "schema": "{\"car_1\":{\"tables\":{\"car_makers\":{\"columns\":\"*, Id, Maker, FullName, Country\"},\"car_names\":{\"columns\":\"*, MakeId, Model, Make\"},\"cars_data\":{\"columns\":\"*, Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year\"},\"continents\":{\"columns\":\"*, ContId, Continent\"},\"countries\":{\"columns\":\"*, CountryId, CountryName, Continent\"},\"model_list\":{\"columns\":\"*, ModelId, Maker, Model\"}},\"foreign_keys\":\"countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId\",\"primary_keys\":\"continents.ContId,countries.CountryId,car_makers.Id,model_list.ModelId,car_names.MakeId,cars_data.Id\"}}"}
{"sql1": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "sql2": "SELECT car_names.Make , cars_data.Year FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId ORDER BY cars_data.Year LIMIT 1", "semantic equivalence": false, "schema": "{\"car_1\":{\"tables\":{\"car_makers\":{\"columns\":\"*, Id, Maker, FullName, Country\"},\"car_names\":{\"columns\":\"*, MakeId, Model, Make\"},\"cars_data\":{\"columns\":\"*, Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year\"},\"continents\":{\"columns\":\"*, ContId, Continent\"},\"countries\":{\"columns\":\"*, CountryId, CountryName, Continent\"},\"model_list\":{\"columns\":\"*, ModelId, Maker, Model\"}},\"foreign_keys\":\"countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId\",\"primary_keys\":\"continents.ContId,countries.CountryId,car_makers.Id,model_list.ModelId,car_names.MakeId,cars_data.Id\"}}"}
{"sql1": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "sql2": "SELECT T1.Maker, T2.Year FROM car_makers AS T1 JOIN cars_data AS T2 ON T1.Id = T2.Id ORDER BY T2.Year ASC LIMIT 1", "semantic equivalence": false, "schema": "{\"car_1\":{\"tables\":{\"car_makers\":{\"columns\":\"*, Id, Maker, FullName, Country\"},\"car_names\":{\"columns\":\"*, MakeId, Model, Make\"},\"cars_data\":{\"columns\":\"*, Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year\"},\"continents\":{\"columns\":\"*, ContId, Continent\"},\"countries\":{\"columns\":\"*, CountryId, CountryName, Continent\"},\"model_list\":{\"columns\":\"*, ModelId, Maker, Model\"}},\"foreign_keys\":\"countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId\",\"primary_keys\":\"continents.ContId,countries.CountryId,car_makers.Id,model_list.ModelId,car_names.MakeId,cars_data.Id\"}}"}
{"sql1": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;", "sql2": "SELECT DISTINCT model_list.Model FROM model_list JOIN cars_data ON model_list.ModelId = cars_data.Id WHERE cars_data.Year > 1980", "semantic equivalence": false, "schema": "{\"car_1\":{\"tables\":{\"car_makers\":{\"columns\":\"*, Id, Maker, FullName, Country\"},\"car_names\":{\"columns\":\"*, MakeId, Model, Make\"},\"cars_data\":{\"columns\":\"*, Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year\"},\"continents\":{\"columns\":\"*, ContId, Continent\"},\"countries\":{\"columns\":\"*, CountryId, CountryName, Continent\"},\"model_list\":{\"columns\":\"*, ModelId, Maker, Model\"}},\"foreign_keys\":\"countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId\",\"primary_keys\":\"continents.ContId,countries.CountryId,car_makers.Id,model_list.ModelId,car_names.MakeId,cars_data.Id\"}}"}
{"sql1": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;", "sql2": "SELECT DISTINCT model_list.Model FROM model_list JOIN cars_data ON model_list.ModelId = cars_data.Id WHERE cars_data.Year > 1980", "semantic equivalence": false, "schema": "{\"car_1\":{\"tables\":{\"car_makers\":{\"columns\":\"*, Id, Maker, FullName, Country\"},\"car_names\":{\"columns\":\"*, MakeId, Model, Make\"},\"cars_data\":{\"columns\":\"*, Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year\"},\"continents\":{\"columns\":\"*, ContId, Continent\"},\"countries\":{\"columns\":\"*, CountryId, CountryName, Continent\"},\"model_list\":{\"columns\":\"*, ModelId, Maker, Model\"}},\"foreign_keys\":\"countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId\",\"primary_keys\":\"continents.ContId,countries.CountryId,car_makers.Id,model_list.ModelId,car_names.MakeId,cars_data.Id\"}}"}
{"sql1": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';", "sql2": "SELECT count(*) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'France'", "semantic equivalence": false, "schema": "{\"car_1\":{\"tables\":{\"car_makers\":{\"columns\":\"*, Id, Maker, FullName, Country\"},\"car_names\":{\"columns\":\"*, MakeId, Model, Make\"},\"cars_data\":{\"columns\":\"*, Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year\"},\"continents\":{\"columns\":\"*, ContId, Continent\"},\"countries\":{\"columns\":\"*, CountryId, CountryName, Continent\"},\"model_list\":{\"columns\":\"*, ModelId, Maker, Model\"}},\"foreign_keys\":\"countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId\",\"primary_keys\":\"continents.ContId,countries.CountryId,car_makers.Id,model_list.ModelId,car_names.MakeId,cars_data.Id\"}}"}
{"sql1": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';", "sql2": "SELECT count(DISTINCT Maker) FROM car_makers WHERE Country IN (SELECT CountryId FROM countries WHERE CountryName = 'France')", "semantic equivalence": false, "schema": "{\"car_1\":{\"tables\":{\"car_makers\":{\"columns\":\"*, Id, Maker, FullName, Country\"},\"car_names\":{\"columns\":\"*, MakeId, Model, Make\"},\"cars_data\":{\"columns\":\"*, Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year\"},\"continents\":{\"columns\":\"*, ContId, Continent\"},\"countries\":{\"columns\":\"*, CountryId, CountryName, Continent\"},\"model_list\":{\"columns\":\"*, ModelId, Maker, Model\"}},\"foreign_keys\":\"countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId\",\"primary_keys\":\"continents.ContId,countries.CountryId,car_makers.Id,model_list.ModelId,car_names.MakeId,cars_data.Id\"}}"}
{"sql1": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "sql2": "SELECT count(*) FROM model_list AS ml JOIN car_makers AS cm ON ml.Maker = cm.Id JOIN countries AS c ON cm.Country = c.CountryId JOIN continents as cnt ON c.Continent = cnt.ContId WHERE cnt.Continent = 'USA';", "semantic equivalence": false, "schema": "{\"car_1\":{\"tables\":{\"car_makers\":{\"columns\":\"*, Id, Maker, FullName, Country\"},\"car_names\":{\"columns\":\"*, MakeId, Model, Make\"},\"cars_data\":{\"columns\":\"*, Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year\"},\"continents\":{\"columns\":\"*, ContId, Continent\"},\"countries\":{\"columns\":\"*, CountryId, CountryName, Continent\"},\"model_list\":{\"columns\":\"*, ModelId, Maker, Model\"}},\"foreign_keys\":\"countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId\",\"primary_keys\":\"continents.ContId,countries.CountryId,car_makers.Id,model_list.ModelId,car_names.MakeId,cars_data.Id\"}}"}
{"sql1": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "sql2": "SELECT count(*) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = \"United States\");", "semantic equivalence": false, "schema": "{\"car_1\":{\"tables\":{\"car_makers\":{\"columns\":\"*, Id, Maker, FullName, Country\"},\"car_names\":{\"columns\":\"*, MakeId, Model, Make\"},\"cars_data\":{\"columns\":\"*, Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year\"},\"continents\":{\"columns\":\"*, ContId, Continent\"},\"countries\":{\"columns\":\"*, CountryId, CountryName, Continent\"},\"model_list\":{\"columns\":\"*, ModelId, Maker, Model\"}},\"foreign_keys\":\"countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId\",\"primary_keys\":\"continents.ContId,countries.CountryId,car_makers.Id,model_list.ModelId,car_names.MakeId,cars_data.Id\"}}"}
{"sql1": "SELECT Maker ,  Model FROM MODEL_LIST;", "sql2": "SELECT car_makers.Maker , model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker", "semantic equivalence": false, "schema": "{\"car_1\":{\"tables\":{\"car_makers\":{\"columns\":\"*, Id, Maker, FullName, Country\"},\"car_names\":{\"columns\":\"*, MakeId, Model, Make\"},\"cars_data\":{\"columns\":\"*, Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year\"},\"continents\":{\"columns\":\"*, ContId, Continent\"},\"countries\":{\"columns\":\"*, CountryId, CountryName, Continent\"},\"model_list\":{\"columns\":\"*, ModelId, Maker, Model\"}},\"foreign_keys\":\"countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId\",\"primary_keys\":\"continents.ContId,countries.CountryId,car_makers.Id,model_list.ModelId,car_names.MakeId,cars_data.Id\"}}"}
{"sql1": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;", "sql2": "SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.Continent = (SELECT ContId FROM continents WHERE Continent = 'Europe') GROUP BY countries.CountryName HAVING COUNT(DISTINCT car_makers.Maker) >= 3", "semantic equivalence": false, "schema": "{\"car_1\":{\"tables\":{\"car_makers\":{\"columns\":\"*, Id, Maker, FullName, Country\"},\"car_names\":{\"columns\":\"*, MakeId, Model, Make\"},\"cars_data\":{\"columns\":\"*, Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year\"},\"continents\":{\"columns\":\"*, ContId, Continent\"},\"countries\":{\"columns\":\"*, CountryId, CountryName, Continent\"},\"model_list\":{\"columns\":\"*, ModelId, Maker, Model\"}},\"foreign_keys\":\"countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId\",\"primary_keys\":\"continents.ContId,countries.CountryId,car_makers.Id,model_list.ModelId,car_names.MakeId,cars_data.Id\"}}"}
{"sql1": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;", "sql2": "SELECT countries.CountryName FROM countries JOIN continents ON countries.Continent = continents.ContId JOIN car_makers ON countries.CountryId = car_makers.Country WHERE continents.Continent = 'Europe' GROUP BY countries.CountryName HAVING count(car_makers.Id) >= 3", "semantic equivalence": false, "schema": "{\"car_1\":{\"tables\":{\"car_makers\":{\"columns\":\"*, Id, Maker, FullName, Country\"},\"car_names\":{\"columns\":\"*, MakeId, Model, Make\"},\"cars_data\":{\"columns\":\"*, Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year\"},\"continents\":{\"columns\":\"*, ContId, Continent\"},\"countries\":{\"columns\":\"*, CountryId, CountryName, Continent\"},\"model_list\":{\"columns\":\"*, ModelId, Maker, Model\"}},\"foreign_keys\":\"countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId\",\"primary_keys\":\"continents.ContId,countries.CountryId,car_makers.Id,model_list.ModelId,car_names.MakeId,cars_data.Id\"}}"}
{"sql1": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;", "sql2": "SELECT max(T1.Horsepower), T2.Make FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 3 GROUP BY T2.Make", "semantic equivalence": false, "schema": "{\"car_1\":{\"tables\":{\"car_makers\":{\"columns\":\"*, Id, Maker, FullName, Country\"},\"car_names\":{\"columns\":\"*, MakeId, Model, Make\"},\"cars_data\":{\"columns\":\"*, Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year\"},\"continents\":{\"columns\":\"*, ContId, Continent\"},\"countries\":{\"columns\":\"*, CountryId, CountryName, Continent\"},\"model_list\":{\"columns\":\"*, ModelId, Maker, Model\"}},\"foreign_keys\":\"countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId\",\"primary_keys\":\"continents.ContId,countries.CountryId,car_makers.Id,model_list.ModelId,car_names.MakeId,cars_data.Id\"}}"}
{"sql1": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;", "sql2": "SELECT model FROM model_list JOIN cars_data ON model_list.ModelId = cars_data.Id ORDER BY MPG DESC LIMIT 1;", "semantic equivalence": false, "schema": "{\"car_1\":{\"tables\":{\"car_makers\":{\"columns\":\"*, Id, Maker, FullName, Country\"},\"car_names\":{\"columns\":\"*, MakeId, Model, Make\"},\"cars_data\":{\"columns\":\"*, Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year\"},\"continents\":{\"columns\":\"*, ContId, Continent\"},\"countries\":{\"columns\":\"*, CountryId, CountryName, Continent\"},\"model_list\":{\"columns\":\"*, ModelId, Maker, Model\"}},\"foreign_keys\":\"countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId\",\"primary_keys\":\"continents.ContId,countries.CountryId,car_makers.Id,model_list.ModelId,car_names.MakeId,cars_data.Id\"}}"}
{"sql1": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;", "sql2": "SELECT model FROM model_list JOIN cars_data ON model_list.ModelId = cars_data.Id ORDER BY MPG DESC LIMIT 1", "semantic equivalence": false, "schema": "{\"car_1\":{\"tables\":{\"car_makers\":{\"columns\":\"*, Id, Maker, FullName, Country\"},\"car_names\":{\"columns\":\"*, MakeId, Model, Make\"},\"cars_data\":{\"columns\":\"*, Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year\"},\"continents\":{\"columns\":\"*, ContId, Continent\"},\"countries\":{\"columns\":\"*, CountryId, CountryName, Continent\"},\"model_list\":{\"columns\":\"*, ModelId, Maker, Model\"}},\"foreign_keys\":\"countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId\",\"primary_keys\":\"continents.ContId,countries.CountryId,car_makers.Id,model_list.ModelId,car_names.MakeId,cars_data.Id\"}}"}
{"sql1": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';", "sql2": "SELECT avg(T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'volvo'", "semantic equivalence": false, "schema": "{\"car_1\":{\"tables\":{\"car_makers\":{\"columns\":\"*, Id, Maker, FullName, Country\"},\"car_names\":{\"columns\":\"*, MakeId, Model, Make\"},\"cars_data\":{\"columns\":\"*, Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year\"},\"continents\":{\"columns\":\"*, ContId, Continent\"},\"countries\":{\"columns\":\"*, CountryId, CountryName, Continent\"},\"model_list\":{\"columns\":\"*, ModelId, Maker, Model\"}},\"foreign_keys\":\"countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId\",\"primary_keys\":\"continents.ContId,countries.CountryId,car_makers.Id,model_list.ModelId,car_names.MakeId,cars_data.Id\"}}"}
{"sql1": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;", "sql2": "SELECT Model FROM model_list GROUP BY Model ORDER BY COUNT(*) DESC LIMIT 1;", "semantic equivalence": false, "schema": "{\"car_1\":{\"tables\":{\"car_makers\":{\"columns\":\"*, Id, Maker, FullName, Country\"},\"car_names\":{\"columns\":\"*, MakeId, Model, Make\"},\"cars_data\":{\"columns\":\"*, Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year\"},\"continents\":{\"columns\":\"*, ContId, Continent\"},\"countries\":{\"columns\":\"*, CountryId, CountryName, Continent\"},\"model_list\":{\"columns\":\"*, ModelId, Maker, Model\"}},\"foreign_keys\":\"countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId\",\"primary_keys\":\"continents.ContId,countries.CountryId,car_makers.Id,model_list.ModelId,car_names.MakeId,cars_data.Id\"}}"}
{"sql1": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;", "sql2": "SELECT Model , COUNT(*) FROM car_names GROUP BY Model ORDER BY COUNT(*) DESC LIMIT 1", "semantic equivalence": false, "schema": "{\"car_1\":{\"tables\":{\"car_makers\":{\"columns\":\"*, Id, Maker, FullName, Country\"},\"car_names\":{\"columns\":\"*, MakeId, Model, Make\"},\"cars_data\":{\"columns\":\"*, Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year\"},\"continents\":{\"columns\":\"*, ContId, Continent\"},\"countries\":{\"columns\":\"*, CountryId, CountryName, Continent\"},\"model_list\":{\"columns\":\"*, ModelId, Maker, Model\"}},\"foreign_keys\":\"countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId\",\"primary_keys\":\"continents.ContId,countries.CountryId,car_makers.Id,model_list.ModelId,car_names.MakeId,cars_data.Id\"}}"}
{"sql1": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';", "sql2": "SELECT count(*) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.Maker = \"American Motor Company\";", "semantic equivalence": false, "schema": "{\"car_1\":{\"tables\":{\"car_makers\":{\"columns\":\"*, Id, Maker, FullName, Country\"},\"car_names\":{\"columns\":\"*, MakeId, Model, Make\"},\"cars_data\":{\"columns\":\"*, Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year\"},\"continents\":{\"columns\":\"*, ContId, Continent\"},\"countries\":{\"columns\":\"*, CountryId, CountryName, Continent\"},\"model_list\":{\"columns\":\"*, ModelId, Maker, Model\"}},\"foreign_keys\":\"countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId\",\"primary_keys\":\"continents.ContId,countries.CountryId,car_makers.Id,model_list.ModelId,car_names.MakeId,cars_data.Id\"}}"}
{"sql1": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;", "sql2": "SELECT T1.Id, T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count(T1.Id) > 3;", "semantic equivalence": false, "schema": "{\"car_1\":{\"tables\":{\"car_makers\":{\"columns\":\"*, Id, Maker, FullName, Country\"},\"car_names\":{\"columns\":\"*, MakeId, Model, Make\"},\"cars_data\":{\"columns\":\"*, Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year\"},\"continents\":{\"columns\":\"*, ContId, Continent\"},\"countries\":{\"columns\":\"*, CountryId, CountryName, Continent\"},\"model_list\":{\"columns\":\"*, ModelId, Maker, Model\"}},\"foreign_keys\":\"countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId\",\"primary_keys\":\"continents.ContId,countries.CountryId,car_makers.Id,model_list.ModelId,car_names.MakeId,cars_data.Id\"}}"}
{"sql1": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "sql2": "SELECT Model FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id JOIN cars_data AS T3 ON T1.ModelId = T3.Id WHERE T2.FullName = \"General Motors\" UNION SELECT Model FROM model_list AS T1 JOIN cars_data AS T2 ON T1.ModelId = T2.Id WHERE T2.Weight > 3500", "semantic equivalence": false, "schema": "{\"car_1\":{\"tables\":{\"car_makers\":{\"columns\":\"*, Id, Maker, FullName, Country\"},\"car_names\":{\"columns\":\"*, MakeId, Model, Make\"},\"cars_data\":{\"columns\":\"*, Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year\"},\"continents\":{\"columns\":\"*, ContId, Continent\"},\"countries\":{\"columns\":\"*, CountryId, CountryName, Continent\"},\"model_list\":{\"columns\":\"*, ModelId, Maker, Model\"}},\"foreign_keys\":\"countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId\",\"primary_keys\":\"continents.ContId,countries.CountryId,car_makers.Id,model_list.ModelId,car_names.MakeId,cars_data.Id\"}}"}
{"sql1": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "sql2": "SELECT Model FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Maker = \"General Motors\") UNION SELECT Make FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data where Weight > 3500)", "semantic equivalence": false, "schema": "{\"car_1\":{\"tables\":{\"car_makers\":{\"columns\":\"*, Id, Maker, FullName, Country\"},\"car_names\":{\"columns\":\"*, MakeId, Model, Make\"},\"cars_data\":{\"columns\":\"*, Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year\"},\"continents\":{\"columns\":\"*, ContId, Continent\"},\"countries\":{\"columns\":\"*, CountryId, CountryName, Continent\"},\"model_list\":{\"columns\":\"*, ModelId, Maker, Model\"}},\"foreign_keys\":\"countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId\",\"primary_keys\":\"continents.ContId,countries.CountryId,car_makers.Id,model_list.ModelId,car_names.MakeId,cars_data.Id\"}}"}
{"sql1": "select distinct year from cars_data where weight between 3000 and 4000;", "sql2": "SELECT Year FROM cars_data WHERE Weight BETWEEN 3000 AND 4000", "semantic equivalence": false, "schema": "{\"car_1\":{\"tables\":{\"car_makers\":{\"columns\":\"*, Id, Maker, FullName, Country\"},\"car_names\":{\"columns\":\"*, MakeId, Model, Make\"},\"cars_data\":{\"columns\":\"*, Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year\"},\"continents\":{\"columns\":\"*, ContId, Continent\"},\"countries\":{\"columns\":\"*, CountryId, CountryName, Continent\"},\"model_list\":{\"columns\":\"*, ModelId, Maker, Model\"}},\"foreign_keys\":\"countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId\",\"primary_keys\":\"continents.ContId,countries.CountryId,car_makers.Id,model_list.ModelId,car_names.MakeId,cars_data.Id\"}}"}
{"sql1": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "sql2": "SELECT COUNT(*) FROM (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(*) > 2)", "semantic equivalence": false, "schema": "{\"car_1\":{\"tables\":{\"car_makers\":{\"columns\":\"*, Id, Maker, FullName, Country\"},\"car_names\":{\"columns\":\"*, MakeId, Model, Make\"},\"cars_data\":{\"columns\":\"*, Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year\"},\"continents\":{\"columns\":\"*, ContId, Continent\"},\"countries\":{\"columns\":\"*, CountryId, CountryName, Continent\"},\"model_list\":{\"columns\":\"*, ModelId, Maker, Model\"}},\"foreign_keys\":\"countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId\",\"primary_keys\":\"continents.ContId,countries.CountryId,car_makers.Id,model_list.ModelId,car_names.MakeId,cars_data.Id\"}}"}
{"sql1": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "sql2": "SELECT count(*) FROM (SELECT Country FROM car_makers GROUP BY Country HAVING count(*) > 2)", "semantic equivalence": false, "schema": "{\"car_1\":{\"tables\":{\"car_makers\":{\"columns\":\"*, Id, Maker, FullName, Country\"},\"car_names\":{\"columns\":\"*, MakeId, Model, Make\"},\"cars_data\":{\"columns\":\"*, Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year\"},\"continents\":{\"columns\":\"*, ContId, Continent\"},\"countries\":{\"columns\":\"*, CountryId, CountryName, Continent\"},\"model_list\":{\"columns\":\"*, ModelId, Maker, Model\"}},\"foreign_keys\":\"countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId\",\"primary_keys\":\"continents.ContId,countries.CountryId,car_makers.Id,model_list.ModelId,car_names.MakeId,cars_data.Id\"}}"}
{"sql1": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "sql2": "SELECT T2.Model FROM cars_data AS T1 JOIN model_list AS T2 ON T1.Id = T2.ModelId WHERE T1.Cylinders = 4 ORDER BY T1.Horsepower DESC LIMIT 1;", "semantic equivalence": false, "schema": "{\"car_1\":{\"tables\":{\"car_makers\":{\"columns\":\"*, Id, Maker, FullName, Country\"},\"car_names\":{\"columns\":\"*, MakeId, Model, Make\"},\"cars_data\":{\"columns\":\"*, Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year\"},\"continents\":{\"columns\":\"*, ContId, Continent\"},\"countries\":{\"columns\":\"*, CountryId, CountryName, Continent\"},\"model_list\":{\"columns\":\"*, ModelId, Maker, Model\"}},\"foreign_keys\":\"countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId\",\"primary_keys\":\"continents.ContId,countries.CountryId,car_makers.Id,model_list.ModelId,car_names.MakeId,cars_data.Id\"}}"}
{"sql1": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "sql2": "SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON model_list.ModelId = cars_data.Id WHERE cars_data.Weight < 3500 AND car_makers.Maker != 'Ford Motor Company'", "semantic equivalence": false, "schema": "{\"car_1\":{\"tables\":{\"car_makers\":{\"columns\":\"*, Id, Maker, FullName, Country\"},\"car_names\":{\"columns\":\"*, MakeId, Model, Make\"},\"cars_data\":{\"columns\":\"*, Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year\"},\"continents\":{\"columns\":\"*, ContId, Continent\"},\"countries\":{\"columns\":\"*, CountryId, CountryName, Continent\"},\"model_list\":{\"columns\":\"*, ModelId, Maker, Model\"}},\"foreign_keys\":\"countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId\",\"primary_keys\":\"continents.ContId,countries.CountryId,car_makers.Id,model_list.ModelId,car_names.MakeId,cars_data.Id\"}}"}
{"sql1": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "sql2": "SELECT T3.Model FROM model_list AS T3 JOIN car_makers AS T2 ON T3.Maker = T2.Id JOIN cars_data AS T1 ON T3.ModelId = T1.Id WHERE T1.Weight < 3500 AND T2.Maker != 'Ford Motor Company'", "semantic equivalence": false, "schema": "{\"car_1\":{\"tables\":{\"car_makers\":{\"columns\":\"*, Id, Maker, FullName, Country\"},\"car_names\":{\"columns\":\"*, MakeId, Model, Make\"},\"cars_data\":{\"columns\":\"*, Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year\"},\"continents\":{\"columns\":\"*, ContId, Continent\"},\"countries\":{\"columns\":\"*, CountryId, CountryName, Continent\"},\"model_list\":{\"columns\":\"*, ModelId, Maker, Model\"}},\"foreign_keys\":\"countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId\",\"primary_keys\":\"continents.ContId,countries.CountryId,car_makers.Id,model_list.ModelId,car_names.MakeId,cars_data.Id\"}}"}
{"sql1": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;", "sql2": "SELECT T1.Id, T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count(T2.Model) >= 2 INTERSECT SELECT T1.Id, T1.Maker FROM car_makers AS T1 GROUP BY T1.Maker HAVING count(*) > 3", "semantic equivalence": false, "schema": "{\"car_1\":{\"tables\":{\"car_makers\":{\"columns\":\"*, Id, Maker, FullName, Country\"},\"car_names\":{\"columns\":\"*, MakeId, Model, Make\"},\"cars_data\":{\"columns\":\"*, Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year\"},\"continents\":{\"columns\":\"*, ContId, Continent\"},\"countries\":{\"columns\":\"*, CountryId, CountryName, Continent\"},\"model_list\":{\"columns\":\"*, ModelId, Maker, Model\"}},\"foreign_keys\":\"countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId\",\"primary_keys\":\"continents.ContId,countries.CountryId,car_makers.Id,model_list.ModelId,car_names.MakeId,cars_data.Id\"}}"}
{"sql1": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;", "sql2": "SELECT T1.Id , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count(DISTINCT T2.Model) >= 2 AND count(T2.Model) > 3", "semantic equivalence": false, "schema": "{\"car_1\":{\"tables\":{\"car_makers\":{\"columns\":\"*, Id, Maker, FullName, Country\"},\"car_names\":{\"columns\":\"*, MakeId, Model, Make\"},\"cars_data\":{\"columns\":\"*, Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year\"},\"continents\":{\"columns\":\"*, ContId, Continent\"},\"countries\":{\"columns\":\"*, CountryId, CountryName, Continent\"},\"model_list\":{\"columns\":\"*, ModelId, Maker, Model\"}},\"foreign_keys\":\"countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId\",\"primary_keys\":\"continents.ContId,countries.CountryId,car_makers.Id,model_list.ModelId,car_names.MakeId,cars_data.Id\"}}"}
{"sql1": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "sql2": "SELECT Country FROM airlines WHERE Airline = \"Jetblue Airways\";", "semantic equivalence": false, "schema": "{\"flight_2\":{\"tables\":{\"airlines\":{\"columns\":\"*, uid, Airline, Abbreviation, Country\"},\"airports\":{\"columns\":\"*, City, AirportCode, AirportName, Country, CountryAbbrev\"},\"flights\":{\"columns\":\"*, Airline, FlightNo, SourceAirport, DestAirport\"}},\"foreign_keys\":\"flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode\",\"primary_keys\":\"airlines.uid,airports.AirportCode,flights.Airline\"}}"}
{"sql1": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "sql2": "SELECT Abbreviation FROM airlines WHERE Airline = \"Jetblue Airways\"", "semantic equivalence": false, "schema": "{\"flight_2\":{\"tables\":{\"airlines\":{\"columns\":\"*, uid, Airline, Abbreviation, Country\"},\"airports\":{\"columns\":\"*, City, AirportCode, AirportName, Country, CountryAbbrev\"},\"flights\":{\"columns\":\"*, Airline, FlightNo, SourceAirport, DestAirport\"}},\"foreign_keys\":\"flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode\",\"primary_keys\":\"airlines.uid,airports.AirportCode,flights.Airline\"}}"}
{"sql1": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "sql2": "SELECT count(*) FROM flights AS T1 JOIN airlines AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = \"Jetblue Airways\"", "semantic equivalence": false, "schema": "{\"flight_2\":{\"tables\":{\"airlines\":{\"columns\":\"*, uid, Airline, Abbreviation, Country\"},\"airports\":{\"columns\":\"*, City, AirportCode, AirportName, Country, CountryAbbrev\"},\"flights\":{\"columns\":\"*, Airline, FlightNo, SourceAirport, DestAirport\"}},\"foreign_keys\":\"flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode\",\"primary_keys\":\"airlines.uid,airports.AirportCode,flights.Airline\"}}"}
{"sql1": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1", "sql2": "SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY count(*) DESC LIMIT 1", "semantic equivalence": false, "schema": "{\"flight_2\":{\"tables\":{\"airlines\":{\"columns\":\"*, uid, Airline, Abbreviation, Country\"},\"airports\":{\"columns\":\"*, City, AirportCode, AirportName, Country, CountryAbbrev\"},\"flights\":{\"columns\":\"*, Airline, FlightNo, SourceAirport, DestAirport\"}},\"foreign_keys\":\"flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode\",\"primary_keys\":\"airlines.uid,airports.AirportCode,flights.Airline\"}}"}
{"sql1": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1", "sql2": "SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY count(*) DESC LIMIT 1", "semantic equivalence": false, "schema": "{\"flight_2\":{\"tables\":{\"airlines\":{\"columns\":\"*, uid, Airline, Abbreviation, Country\"},\"airports\":{\"columns\":\"*, City, AirportCode, AirportName, Country, CountryAbbrev\"},\"flights\":{\"columns\":\"*, Airline, FlightNo, SourceAirport, DestAirport\"}},\"foreign_keys\":\"flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode\",\"primary_keys\":\"airlines.uid,airports.AirportCode,flights.Airline\"}}"}
{"sql1": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1", "sql2": "SELECT DestAirport FROM flights GROUP BY DestAirport ORDER BY count(*) ASC LIMIT 1", "semantic equivalence": false, "schema": "{\"flight_2\":{\"tables\":{\"airlines\":{\"columns\":\"*, uid, Airline, Abbreviation, Country\"},\"airports\":{\"columns\":\"*, City, AirportCode, AirportName, Country, CountryAbbrev\"},\"flights\":{\"columns\":\"*, Airline, FlightNo, SourceAirport, DestAirport\"}},\"foreign_keys\":\"flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode\",\"primary_keys\":\"airlines.uid,airports.AirportCode,flights.Airline\"}}"}
{"sql1": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1", "sql2": "SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY count(*) ASC LIMIT 1", "semantic equivalence": false, "schema": "{\"flight_2\":{\"tables\":{\"airlines\":{\"columns\":\"*, uid, Airline, Abbreviation, Country\"},\"airports\":{\"columns\":\"*, City, AirportCode, AirportName, Country, CountryAbbrev\"},\"flights\":{\"columns\":\"*, Airline, FlightNo, SourceAirport, DestAirport\"}},\"foreign_keys\":\"flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode\",\"primary_keys\":\"airlines.uid,airports.AirportCode,flights.Airline\"}}"}
{"sql1": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1", "sql2": "SELECT Airline FROM flights GROUP BY Airline ORDER BY count(*) DESC LIMIT 1", "semantic equivalence": false, "schema": "{\"flight_2\":{\"tables\":{\"airlines\":{\"columns\":\"*, uid, Airline, Abbreviation, Country\"},\"airports\":{\"columns\":\"*, City, AirportCode, AirportName, Country, CountryAbbrev\"},\"flights\":{\"columns\":\"*, Airline, FlightNo, SourceAirport, DestAirport\"}},\"foreign_keys\":\"flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode\",\"primary_keys\":\"airlines.uid,airports.AirportCode,flights.Airline\"}}"}
{"sql1": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1", "sql2": "SELECT Airline FROM flights GROUP BY Airline ORDER BY COUNT(*) DESC LIMIT 1", "semantic equivalence": false, "schema": "{\"flight_2\":{\"tables\":{\"airlines\":{\"columns\":\"*, uid, Airline, Abbreviation, Country\"},\"airports\":{\"columns\":\"*, City, AirportCode, AirportName, Country, CountryAbbrev\"},\"flights\":{\"columns\":\"*, Airline, FlightNo, SourceAirport, DestAirport\"}},\"foreign_keys\":\"flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode\",\"primary_keys\":\"airlines.uid,airports.AirportCode,flights.Airline\"}}"}
{"sql1": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1", "sql2": "SELECT T1.Abbreviation, T1.Country FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T2.Airline ORDER BY count(*) ASC LIMIT 1", "semantic equivalence": false, "schema": "{\"flight_2\":{\"tables\":{\"airlines\":{\"columns\":\"*, uid, Airline, Abbreviation, Country\"},\"airports\":{\"columns\":\"*, City, AirportCode, AirportName, Country, CountryAbbrev\"},\"flights\":{\"columns\":\"*, Airline, FlightNo, SourceAirport, DestAirport\"}},\"foreign_keys\":\"flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode\",\"primary_keys\":\"airlines.uid,airports.AirportCode,flights.Airline\"}}"}
{"sql1": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1", "sql2": "SELECT A.Abbreviation, A.Country FROM airlines AS A JOIN flights AS F ON A.uid = F.Airline GROUP BY F.Airline ORDER BY count(*) LIMIT 1", "semantic equivalence": false, "schema": "{\"flight_2\":{\"tables\":{\"airlines\":{\"columns\":\"*, uid, Airline, Abbreviation, Country\"},\"airports\":{\"columns\":\"*, City, AirportCode, AirportName, Country, CountryAbbrev\"},\"flights\":{\"columns\":\"*, Airline, FlightNo, SourceAirport, DestAirport\"}},\"foreign_keys\":\"flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode\",\"primary_keys\":\"airlines.uid,airports.AirportCode,flights.Airline\"}}"}
{"sql1": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10", "sql2": "SELECT Airline FROM flights GROUP BY Airline HAVING count(*) >= 10", "semantic equivalence": false, "schema": "{\"flight_2\":{\"tables\":{\"airlines\":{\"columns\":\"*, uid, Airline, Abbreviation, Country\"},\"airports\":{\"columns\":\"*, City, AirportCode, AirportName, Country, CountryAbbrev\"},\"flights\":{\"columns\":\"*, Airline, FlightNo, SourceAirport, DestAirport\"}},\"foreign_keys\":\"flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode\",\"primary_keys\":\"airlines.uid,airports.AirportCode,flights.Airline\"}}"}
{"sql1": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "sql2": "SELECT MIN(Version_Number), Template_Type_Code FROM Templates GROUP BY Template_Type_Code", "semantic equivalence": false, "schema": "{\"cre_Doc_Template_Mgt\":{\"tables\":{\"Documents\":{\"columns\":\"*, Document_ID, Template_ID, Document_Name, Document_Description, Other_Details\"},\"Paragraphs\":{\"columns\":\"*, Paragraph_ID, Document_ID, Paragraph_Text, Other_Details\"},\"Ref_Template_Types\":{\"columns\":\"*, Template_Type_Code, Template_Type_Description\"},\"Templates\":{\"columns\":\"*, Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details\"}},\"foreign_keys\":\"Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID\",\"primary_keys\":\"Ref_Template_Types.Template_Type_Code,Templates.Template_ID,Documents.Document_ID,Paragraphs.Paragraph_ID\"}}"}
{"sql1": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'", "sql2": "SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text IN ('Brazil', 'Ireland')", "semantic equivalence": false, "schema": "{\"cre_Doc_Template_Mgt\":{\"tables\":{\"Documents\":{\"columns\":\"*, Document_ID, Template_ID, Document_Name, Document_Description, Other_Details\"},\"Paragraphs\":{\"columns\":\"*, Paragraph_ID, Document_ID, Paragraph_Text, Other_Details\"},\"Ref_Template_Types\":{\"columns\":\"*, Template_Type_Code, Template_Type_Description\"},\"Templates\":{\"columns\":\"*, Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details\"}},\"foreign_keys\":\"Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID\",\"primary_keys\":\"Ref_Template_Types.Template_Type_Code,Templates.Template_ID,Documents.Document_ID,Paragraphs.Paragraph_ID\"}}"}
{"sql1": "select name from teacher where hometown != \"little lever urban district\"", "sql2": "SELECT Name FROM teacher WHERE Hometown != \"Little Lever Urban District\"", "semantic equivalence": false, "schema": "{\"course_teach\":{\"tables\":{\"course\":{\"columns\":\"*, Course_ID, Staring_Date, Course\"},\"course_arrange\":{\"columns\":\"*, Course_ID, Teacher_ID, Grade\"},\"teacher\":{\"columns\":\"*, Teacher_ID, Name, Age, Hometown\"}},\"foreign_keys\":\"course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID\",\"primary_keys\":\"course.Course_ID,teacher.Teacher_ID,course_arrange.Course_ID\"}}"}
{"sql1": "select name from teacher where hometown != \"little lever urban district\"", "sql2": "SELECT Name FROM teacher WHERE Hometown != \"Little Lever Urban District\"", "semantic equivalence": false, "schema": "{\"course_teach\":{\"tables\":{\"course\":{\"columns\":\"*, Course_ID, Staring_Date, Course\"},\"course_arrange\":{\"columns\":\"*, Course_ID, Teacher_ID, Grade\"},\"teacher\":{\"columns\":\"*, Teacher_ID, Name, Age, Hometown\"}},\"foreign_keys\":\"course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID\",\"primary_keys\":\"course.Course_ID,teacher.Teacher_ID,course_arrange.Course_ID\"}}"}
{"sql1": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1", "sql2": "SELECT T2.ID, T2.Name, T2.Level_of_membership FROM visitor AS T2 JOIN visit AS T1 ON T2.ID = T1.visitor_ID GROUP BY T2.ID ORDER BY SUM(T1.Total_spent) DESC LIMIT 1", "semantic equivalence": false, "schema": "{\"museum_visit\":{\"tables\":{\"museum\":{\"columns\":\"*, Museum_ID, Name, Num_of_Staff, Open_Year\"},\"visit\":{\"columns\":\"*, Museum_ID, visitor_ID, Num_of_Ticket, Total_spent\"},\"visitor\":{\"columns\":\"*, ID, Name, Level_of_membership, Age\"}},\"foreign_keys\":\"visit.visitor_ID = visitor.ID,visit.Museum_ID = museum.Museum_ID\",\"primary_keys\":\"museum.Museum_ID,visitor.ID,visit.Museum_ID\"}}"}
{"sql1": "SELECT min(loser_rank) FROM matches", "sql2": "SELECT max(loser_rank) FROM matches", "semantic equivalence": false, "schema": "{\"wta_1\":{\"tables\":{\"matches\":{\"columns\":\"*, best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year\"},\"players\":{\"columns\":\"*, player_id, first_name, last_name, hand, birth_date, country_code\"},\"rankings\":{\"columns\":\"*, ranking_date, ranking, player_id, ranking_points, tours\"}},\"foreign_keys\":\"matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id\",\"primary_keys\":\"players.player_id\"}}"}
{"sql1": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016", "sql2": "SELECT first_name, last_name FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE year = 2013 INTERSECT SELECT winner_id FROM matches WHERE year = 2016)", "semantic equivalence": false, "schema": "{\"wta_1\":{\"tables\":{\"matches\":{\"columns\":\"*, best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year\"},\"players\":{\"columns\":\"*, player_id, first_name, last_name, hand, birth_date, country_code\"},\"rankings\":{\"columns\":\"*, ranking_date, ranking, player_id, ranking_points, tours\"}},\"foreign_keys\":\"matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id\",\"primary_keys\":\"players.player_id\"}}"}
{"sql1": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "sql2": "SELECT first_name , last_name FROM players ORDER BY birth_date", "semantic equivalence": false, "schema": "{\"wta_1\":{\"tables\":{\"matches\":{\"columns\":\"*, best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year\"},\"players\":{\"columns\":\"*, player_id, first_name, last_name, hand, birth_date, country_code\"},\"rankings\":{\"columns\":\"*, ranking_date, ranking, player_id, ranking_points, tours\"}},\"foreign_keys\":\"matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id\",\"primary_keys\":\"players.player_id\"}}"}
{"sql1": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "sql2": "SELECT first_name, last_name FROM players ORDER BY birth_date", "semantic equivalence": false, "schema": "{\"wta_1\":{\"tables\":{\"matches\":{\"columns\":\"*, best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year\"},\"players\":{\"columns\":\"*, player_id, first_name, last_name, hand, birth_date, country_code\"},\"rankings\":{\"columns\":\"*, ranking_date, ranking, player_id, ranking_points, tours\"}},\"foreign_keys\":\"matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id\",\"primary_keys\":\"players.player_id\"}}"}
{"sql1": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1", "sql2": "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T2.player_id ORDER BY sum(tours) DESC LIMIT 1", "semantic equivalence": false, "schema": "{\"wta_1\":{\"tables\":{\"matches\":{\"columns\":\"*, best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year\"},\"players\":{\"columns\":\"*, player_id, first_name, last_name, hand, birth_date, country_code\"},\"rankings\":{\"columns\":\"*, ranking_date, ranking, player_id, ranking_points, tours\"}},\"foreign_keys\":\"matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id\",\"primary_keys\":\"players.player_id\"}}"}
{"sql1": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1", "sql2": "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id ORDER BY sum(T2.tours) DESC LIMIT 1", "semantic equivalence": false, "schema": "{\"wta_1\":{\"tables\":{\"matches\":{\"columns\":\"*, best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year\"},\"players\":{\"columns\":\"*, player_id, first_name, last_name, hand, birth_date, country_code\"},\"rankings\":{\"columns\":\"*, ranking_date, ranking, player_id, ranking_points, tours\"}},\"foreign_keys\":\"matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id\",\"primary_keys\":\"players.player_id\"}}"}
{"sql1": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1", "sql2": "SELECT p.first_name, p.last_name, r.ranking_points FROM players p JOIN matches m ON p.player_id = m.winner_id JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, r.ranking_points ORDER BY COUNT(*) DESC LIMIT 1", "semantic equivalence": false, "schema": "{\"wta_1\":{\"tables\":{\"matches\":{\"columns\":\"*, best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year\"},\"players\":{\"columns\":\"*, player_id, first_name, last_name, hand, birth_date, country_code\"},\"rankings\":{\"columns\":\"*, ranking_date, ranking, player_id, ranking_points, tours\"}},\"foreign_keys\":\"matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id\",\"primary_keys\":\"players.player_id\"}}"}
{"sql1": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1", "sql2": "SELECT p.first_name, p.last_name, r.ranking_points FROM players AS p JOIN matches AS m ON p.player_id = m.winner_id JOIN rankings AS r ON p.player_id = r.player_id GROUP BY p.player_id ORDER BY count(*) DESC, r.ranking_points DESC LIMIT 1", "semantic equivalence": false, "schema": "{\"wta_1\":{\"tables\":{\"matches\":{\"columns\":\"*, best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year\"},\"players\":{\"columns\":\"*, player_id, first_name, last_name, hand, birth_date, country_code\"},\"rankings\":{\"columns\":\"*, ranking_date, ranking, player_id, ranking_points, tours\"}},\"foreign_keys\":\"matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id\",\"primary_keys\":\"players.player_id\"}}"}
{"sql1": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1", "sql2": "SELECT players.first_name, players.last_name, rankings.ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'Australian Open' ORDER BY rankings.ranking_points DESC LIMIT 1;", "semantic equivalence": false, "schema": "{\"wta_1\":{\"tables\":{\"matches\":{\"columns\":\"*, best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year\"},\"players\":{\"columns\":\"*, player_id, first_name, last_name, hand, birth_date, country_code\"},\"rankings\":{\"columns\":\"*, ranking_date, ranking, player_id, ranking_points, tours\"}},\"foreign_keys\":\"matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id\",\"primary_keys\":\"players.player_id\"}}"}
{"sql1": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1", "sql2": "SELECT \"first_name\", \"last_name\" FROM players INNER JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'Australian Open' ORDER BY matches.winner_rank_points DESC LIMIT 1;", "semantic equivalence": false, "schema": "{\"wta_1\":{\"tables\":{\"matches\":{\"columns\":\"*, best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year\"},\"players\":{\"columns\":\"*, player_id, first_name, last_name, hand, birth_date, country_code\"},\"rankings\":{\"columns\":\"*, ranking_date, ranking, player_id, ranking_points, tours\"}},\"foreign_keys\":\"matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id\",\"primary_keys\":\"players.player_id\"}}"}
{"sql1": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "sql2": "SELECT p1.first_name AS loser_first_name, p1.last_name AS loser_last_name, p2.first_name AS winner_first_name, p2.last_name AS winner_last_name FROM matches INNER JOIN players AS p1 ON matches.loser_id = p1.player_id INNER JOIN players AS p2 ON matches.winner_id = p2.player_id ORDER BY matches.minutes DESC LIMIT 1", "semantic equivalence": false, "schema": "{\"wta_1\":{\"tables\":{\"matches\":{\"columns\":\"*, best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year\"},\"players\":{\"columns\":\"*, player_id, first_name, last_name, hand, birth_date, country_code\"},\"rankings\":{\"columns\":\"*, ranking_date, ranking, player_id, ranking_points, tours\"}},\"foreign_keys\":\"matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id\",\"primary_keys\":\"players.player_id\"}}"}
{"sql1": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "sql2": "SELECT players.first_name, avg(rankings.ranking) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name", "semantic equivalence": false, "schema": "{\"wta_1\":{\"tables\":{\"matches\":{\"columns\":\"*, best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year\"},\"players\":{\"columns\":\"*, player_id, first_name, last_name, hand, birth_date, country_code\"},\"rankings\":{\"columns\":\"*, ranking_date, ranking, player_id, ranking_points, tours\"}},\"foreign_keys\":\"matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id\",\"primary_keys\":\"players.player_id\"}}"}
{"sql1": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date", "sql2": "SELECT ranking_date , count(*) FROM rankings GROUP BY ranking_date", "semantic equivalence": false, "schema": "{\"wta_1\":{\"tables\":{\"matches\":{\"columns\":\"*, best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year\"},\"players\":{\"columns\":\"*, player_id, first_name, last_name, hand, birth_date, country_code\"},\"rankings\":{\"columns\":\"*, ranking_date, ranking, player_id, ranking_points, tours\"}},\"foreign_keys\":\"matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id\",\"primary_keys\":\"players.player_id\"}}"}
{"sql1": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "sql2": "SELECT players.first_name, players.last_name, matches.winner_rank FROM players INNER JOIN matches ON players.player_id = matches.winner_id ORDER BY players.birth_date DESC LIMIT 3", "semantic equivalence": false, "schema": "{\"wta_1\":{\"tables\":{\"matches\":{\"columns\":\"*, best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year\"},\"players\":{\"columns\":\"*, player_id, first_name, last_name, hand, birth_date, country_code\"},\"rankings\":{\"columns\":\"*, ranking_date, ranking, player_id, ranking_points, tours\"}},\"foreign_keys\":\"matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id\",\"primary_keys\":\"players.player_id\"}}"}
{"sql1": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "sql2": "SELECT first_name , last_name , winner_rank FROM players JOIN matches ON players.player_id = matches.winner_id ORDER BY birth_date DESC LIMIT 3;", "semantic equivalence": false, "schema": "{\"wta_1\":{\"tables\":{\"matches\":{\"columns\":\"*, best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year\"},\"players\":{\"columns\":\"*, player_id, first_name, last_name, hand, birth_date, country_code\"},\"rankings\":{\"columns\":\"*, ranking_date, ranking, player_id, ranking_points, tours\"}},\"foreign_keys\":\"matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id\",\"primary_keys\":\"players.player_id\"}}"}
{"sql1": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "sql2": "SELECT count(*) FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T1.hand = \"L\" AND T2.tourney_name = \"WTA Championships\"", "semantic equivalence": false, "schema": "{\"wta_1\":{\"tables\":{\"matches\":{\"columns\":\"*, best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year\"},\"players\":{\"columns\":\"*, player_id, first_name, last_name, hand, birth_date, country_code\"},\"rankings\":{\"columns\":\"*, ranking_date, ranking, player_id, ranking_points, tours\"}},\"foreign_keys\":\"matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id\",\"primary_keys\":\"players.player_id\"}}"}
{"sql1": "SELECT name ,  date FROM battle", "sql2": "SELECT name , date , result FROM battle", "semantic equivalence": false, "schema": "{\"battle_death\":{\"tables\":{\"battle\":{\"columns\":\"*, id, name, date, bulgarian_commander, latin_commander, result\"},\"death\":{\"columns\":\"*, caused_by_ship_id, id, note, killed, injured\"},\"ship\":{\"columns\":\"*, lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship\"}},\"foreign_keys\":\"ship.lost_in_battle = battle.id,death.caused_by_ship_id = ship.id\",\"primary_keys\":\"battle.id,ship.id,death.id\"}}"}
{"sql1": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1", "sql2": "SELECT T1.id, T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T1.id ORDER BY SUM(T2.injured) DESC LIMIT 1", "semantic equivalence": false, "schema": "{\"battle_death\":{\"tables\":{\"battle\":{\"columns\":\"*, id, name, date, bulgarian_commander, latin_commander, result\"},\"death\":{\"columns\":\"*, caused_by_ship_id, id, note, killed, injured\"},\"ship\":{\"columns\":\"*, lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship\"}},\"foreign_keys\":\"ship.lost_in_battle = battle.id,death.caused_by_ship_id = ship.id\",\"primary_keys\":\"battle.id,ship.id,death.id\"}}"}
{"sql1": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'", "sql2": "SELECT T1.name, T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'Lettice' OR T2.name = 'HMS Atalanta'", "semantic equivalence": false, "schema": "{\"battle_death\":{\"tables\":{\"battle\":{\"columns\":\"*, id, name, date, bulgarian_commander, latin_commander, result\"},\"death\":{\"columns\":\"*, caused_by_ship_id, id, note, killed, injured\"},\"ship\":{\"columns\":\"*, lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship\"}},\"foreign_keys\":\"ship.lost_in_battle = battle.id,death.caused_by_ship_id = ship.id\",\"primary_keys\":\"battle.id,ship.id,death.id\"}}"}
{"sql1": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'", "sql2": "SELECT b.name, b.result, b.bulgarian_commander FROM battle AS b LEFT JOIN ship AS s ON b.id = s.lost_in_battle WHERE s.location != 'English Channel' OR s.location IS NULL", "semantic equivalence": false, "schema": "{\"battle_death\":{\"tables\":{\"battle\":{\"columns\":\"*, id, name, date, bulgarian_commander, latin_commander, result\"},\"death\":{\"columns\":\"*, caused_by_ship_id, id, note, killed, injured\"},\"ship\":{\"columns\":\"*, lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship\"}},\"foreign_keys\":\"ship.lost_in_battle = battle.id,death.caused_by_ship_id = ship.id\",\"primary_keys\":\"battle.id,ship.id,death.id\"}}"}
{"sql1": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "sql2": "SELECT course_description FROM Courses WHERE course_name = \"Math\"", "semantic equivalence": false, "schema": "{\"student_transcripts_tracking\":{\"tables\":{\"Addresses\":{\"columns\":\"*, address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details\"},\"Courses\":{\"columns\":\"*, course_id, course_name, course_description, other_details\"},\"Degree_Programs\":{\"columns\":\"*, degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details\"},\"Departments\":{\"columns\":\"*, department_id, department_name, department_description, other_details\"},\"Sections\":{\"columns\":\"*, section_id, course_id, section_name, section_description, other_details\"},\"Semesters\":{\"columns\":\"*, semester_id, semester_name, semester_description, other_details\"},\"Student_Enrolment\":{\"columns\":\"*, student_enrolment_id, degree_program_id, semester_id, student_id, other_details\"},\"Student_Enrolment_Courses\":{\"columns\":\"*, student_course_id, course_id, student_enrolment_id\"},\"Students\":{\"columns\":\"*, student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details\"},\"Transcript_Contents\":{\"columns\":\"*, student_course_id, transcript_id\"},\"Transcripts\":{\"columns\":\"*, transcript_id, transcript_date, other_details\"}},\"foreign_keys\":\"Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\",\"primary_keys\":\"Addresses.address_id,Courses.course_id,Departments.department_id,Degree_Programs.degree_program_id,Sections.section_id,Semesters.semester_id,Students.student_id,Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.student_course_id,Transcripts.transcript_id\"}}"}
{"sql1": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2", "sql2": "SELECT T1.course_name, T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING count(*) < 2", "semantic equivalence": false, "schema": "{\"student_transcripts_tracking\":{\"tables\":{\"Addresses\":{\"columns\":\"*, address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details\"},\"Courses\":{\"columns\":\"*, course_id, course_name, course_description, other_details\"},\"Degree_Programs\":{\"columns\":\"*, degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details\"},\"Departments\":{\"columns\":\"*, department_id, department_name, department_description, other_details\"},\"Sections\":{\"columns\":\"*, section_id, course_id, section_name, section_description, other_details\"},\"Semesters\":{\"columns\":\"*, semester_id, semester_name, semester_description, other_details\"},\"Student_Enrolment\":{\"columns\":\"*, student_enrolment_id, degree_program_id, semester_id, student_id, other_details\"},\"Student_Enrolment_Courses\":{\"columns\":\"*, student_course_id, course_id, student_enrolment_id\"},\"Students\":{\"columns\":\"*, student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details\"},\"Transcript_Contents\":{\"columns\":\"*, student_course_id, transcript_id\"},\"Transcripts\":{\"columns\":\"*, transcript_id, transcript_date, other_details\"}},\"foreign_keys\":\"Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\",\"primary_keys\":\"Addresses.address_id,Courses.course_id,Departments.department_id,Degree_Programs.degree_program_id,Sections.section_id,Semesters.semester_id,Students.student_id,Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.student_course_id,Transcripts.transcript_id\"}}"}
{"sql1": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2", "sql2": "SELECT T1.first_name , T1.middle_name , T1.last_name, T2.student_id FROM Students AS T1, Student_Enrolment AS T2 WHERE T1.student_id = T2.student_id GROUP BY T2.student_id, T2.semester_id HAVING COUNT(T2.degree_program_id) = 2", "semantic equivalence": false, "schema": "{\"student_transcripts_tracking\":{\"tables\":{\"Addresses\":{\"columns\":\"*, address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details\"},\"Courses\":{\"columns\":\"*, course_id, course_name, course_description, other_details\"},\"Degree_Programs\":{\"columns\":\"*, degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details\"},\"Departments\":{\"columns\":\"*, department_id, department_name, department_description, other_details\"},\"Sections\":{\"columns\":\"*, section_id, course_id, section_name, section_description, other_details\"},\"Semesters\":{\"columns\":\"*, semester_id, semester_name, semester_description, other_details\"},\"Student_Enrolment\":{\"columns\":\"*, student_enrolment_id, degree_program_id, semester_id, student_id, other_details\"},\"Student_Enrolment_Courses\":{\"columns\":\"*, student_course_id, course_id, student_enrolment_id\"},\"Students\":{\"columns\":\"*, student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details\"},\"Transcript_Contents\":{\"columns\":\"*, student_course_id, transcript_id\"},\"Transcripts\":{\"columns\":\"*, transcript_id, transcript_date, other_details\"}},\"foreign_keys\":\"Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\",\"primary_keys\":\"Addresses.address_id,Courses.course_id,Departments.department_id,Degree_Programs.degree_program_id,Sections.section_id,Semesters.semester_id,Students.student_id,Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.student_course_id,Transcripts.transcript_id\"}}"}
{"sql1": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2", "sql2": "SELECT S.first_name, S.middle_name, S.last_name, S.student_id FROM Students as S JOIN ( SELECT student_id FROM Student_Enrolment GROUP BY student_id, semester_id HAVING COUNT(degree_program_id) = 2 ) AS SE ON S.student_id = SE.student_id", "semantic equivalence": false, "schema": "{\"student_transcripts_tracking\":{\"tables\":{\"Addresses\":{\"columns\":\"*, address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details\"},\"Courses\":{\"columns\":\"*, course_id, course_name, course_description, other_details\"},\"Degree_Programs\":{\"columns\":\"*, degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details\"},\"Departments\":{\"columns\":\"*, department_id, department_name, department_description, other_details\"},\"Sections\":{\"columns\":\"*, section_id, course_id, section_name, section_description, other_details\"},\"Semesters\":{\"columns\":\"*, semester_id, semester_name, semester_description, other_details\"},\"Student_Enrolment\":{\"columns\":\"*, student_enrolment_id, degree_program_id, semester_id, student_id, other_details\"},\"Student_Enrolment_Courses\":{\"columns\":\"*, student_course_id, course_id, student_enrolment_id\"},\"Students\":{\"columns\":\"*, student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details\"},\"Transcript_Contents\":{\"columns\":\"*, student_course_id, transcript_id\"},\"Transcripts\":{\"columns\":\"*, transcript_id, transcript_date, other_details\"}},\"foreign_keys\":\"Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\",\"primary_keys\":\"Addresses.address_id,Courses.course_id,Departments.department_id,Degree_Programs.degree_program_id,Sections.section_id,Semesters.semester_id,Students.student_id,Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.student_course_id,Transcripts.transcript_id\"}}"}
{"sql1": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "sql2": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name LIKE \"%Bachelor%\"", "semantic equivalence": false, "schema": "{\"student_transcripts_tracking\":{\"tables\":{\"Addresses\":{\"columns\":\"*, address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details\"},\"Courses\":{\"columns\":\"*, course_id, course_name, course_description, other_details\"},\"Degree_Programs\":{\"columns\":\"*, degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details\"},\"Departments\":{\"columns\":\"*, department_id, department_name, department_description, other_details\"},\"Sections\":{\"columns\":\"*, section_id, course_id, section_name, section_description, other_details\"},\"Semesters\":{\"columns\":\"*, semester_id, semester_name, semester_description, other_details\"},\"Student_Enrolment\":{\"columns\":\"*, student_enrolment_id, degree_program_id, semester_id, student_id, other_details\"},\"Student_Enrolment_Courses\":{\"columns\":\"*, student_course_id, course_id, student_enrolment_id\"},\"Students\":{\"columns\":\"*, student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details\"},\"Transcript_Contents\":{\"columns\":\"*, student_course_id, transcript_id\"},\"Transcripts\":{\"columns\":\"*, transcript_id, transcript_date, other_details\"}},\"foreign_keys\":\"Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\",\"primary_keys\":\"Addresses.address_id,Courses.course_id,Departments.department_id,Degree_Programs.degree_program_id,Sections.section_id,Semesters.semester_id,Students.student_id,Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.student_course_id,Transcripts.transcript_id\"}}"}
{"sql1": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "sql2": "SELECT first_name, middle_name, last_name FROM Students AS S JOIN Student_Enrolment AS SE ON S.student_id = SE.student_id JOIN Degree_Programs AS DP ON SE.degree_program_id = DP.degree_program_id WHERE DP.degree_summary_name LIKE \"Bachelors%\";", "semantic equivalence": false, "schema": "{\"student_transcripts_tracking\":{\"tables\":{\"Addresses\":{\"columns\":\"*, address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details\"},\"Courses\":{\"columns\":\"*, course_id, course_name, course_description, other_details\"},\"Degree_Programs\":{\"columns\":\"*, degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details\"},\"Departments\":{\"columns\":\"*, department_id, department_name, department_description, other_details\"},\"Sections\":{\"columns\":\"*, section_id, course_id, section_name, section_description, other_details\"},\"Semesters\":{\"columns\":\"*, semester_id, semester_name, semester_description, other_details\"},\"Student_Enrolment\":{\"columns\":\"*, student_enrolment_id, degree_program_id, semester_id, student_id, other_details\"},\"Student_Enrolment_Courses\":{\"columns\":\"*, student_course_id, course_id, student_enrolment_id\"},\"Students\":{\"columns\":\"*, student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details\"},\"Transcript_Contents\":{\"columns\":\"*, student_course_id, transcript_id\"},\"Transcripts\":{\"columns\":\"*, transcript_id, transcript_date, other_details\"}},\"foreign_keys\":\"Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\",\"primary_keys\":\"Addresses.address_id,Courses.course_id,Departments.department_id,Degree_Programs.degree_program_id,Sections.section_id,Semesters.semester_id,Students.student_id,Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.student_course_id,Transcripts.transcript_id\"}}"}
{"sql1": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "sql2": "SELECT T1.student_id, T1.first_name, T1.middle_name, T1.last_name, COUNT(T2.degree_program_id) as num_enrollments FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY num_enrollments DESC LIMIT 1", "semantic equivalence": false, "schema": "{\"student_transcripts_tracking\":{\"tables\":{\"Addresses\":{\"columns\":\"*, address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details\"},\"Courses\":{\"columns\":\"*, course_id, course_name, course_description, other_details\"},\"Degree_Programs\":{\"columns\":\"*, degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details\"},\"Departments\":{\"columns\":\"*, department_id, department_name, department_description, other_details\"},\"Sections\":{\"columns\":\"*, section_id, course_id, section_name, section_description, other_details\"},\"Semesters\":{\"columns\":\"*, semester_id, semester_name, semester_description, other_details\"},\"Student_Enrolment\":{\"columns\":\"*, student_enrolment_id, degree_program_id, semester_id, student_id, other_details\"},\"Student_Enrolment_Courses\":{\"columns\":\"*, student_course_id, course_id, student_enrolment_id\"},\"Students\":{\"columns\":\"*, student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details\"},\"Transcript_Contents\":{\"columns\":\"*, student_course_id, transcript_id\"},\"Transcripts\":{\"columns\":\"*, transcript_id, transcript_date, other_details\"}},\"foreign_keys\":\"Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\",\"primary_keys\":\"Addresses.address_id,Courses.course_id,Departments.department_id,Degree_Programs.degree_program_id,Sections.section_id,Semesters.semester_id,Students.student_id,Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.student_course_id,Transcripts.transcript_id\"}}"}
{"sql1": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "sql2": "SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id, COUNT(*) AS number_of_enrollments FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY number_of_enrollments DESC LIMIT 1", "semantic equivalence": false, "schema": "{\"student_transcripts_tracking\":{\"tables\":{\"Addresses\":{\"columns\":\"*, address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details\"},\"Courses\":{\"columns\":\"*, course_id, course_name, course_description, other_details\"},\"Degree_Programs\":{\"columns\":\"*, degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details\"},\"Departments\":{\"columns\":\"*, department_id, department_name, department_description, other_details\"},\"Sections\":{\"columns\":\"*, section_id, course_id, section_name, section_description, other_details\"},\"Semesters\":{\"columns\":\"*, semester_id, semester_name, semester_description, other_details\"},\"Student_Enrolment\":{\"columns\":\"*, student_enrolment_id, degree_program_id, semester_id, student_id, other_details\"},\"Student_Enrolment_Courses\":{\"columns\":\"*, student_course_id, course_id, student_enrolment_id\"},\"Students\":{\"columns\":\"*, student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details\"},\"Transcript_Contents\":{\"columns\":\"*, student_course_id, transcript_id\"},\"Transcripts\":{\"columns\":\"*, transcript_id, transcript_date, other_details\"}},\"foreign_keys\":\"Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\",\"primary_keys\":\"Addresses.address_id,Courses.course_id,Departments.department_id,Degree_Programs.degree_program_id,Sections.section_id,Semesters.semester_id,Students.student_id,Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.student_course_id,Transcripts.transcript_id\"}}"}
{"sql1": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id", "sql2": "SELECT last_name FROM Students WHERE current_address_id IN (SELECT address_id FROM Addresses WHERE state_province_county = 'North Carolina') AND student_id NOT IN (SELECT student_id FROM Student_Enrolment)", "semantic equivalence": false, "schema": "{\"student_transcripts_tracking\":{\"tables\":{\"Addresses\":{\"columns\":\"*, address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details\"},\"Courses\":{\"columns\":\"*, course_id, course_name, course_description, other_details\"},\"Degree_Programs\":{\"columns\":\"*, degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details\"},\"Departments\":{\"columns\":\"*, department_id, department_name, department_description, other_details\"},\"Sections\":{\"columns\":\"*, section_id, course_id, section_name, section_description, other_details\"},\"Semesters\":{\"columns\":\"*, semester_id, semester_name, semester_description, other_details\"},\"Student_Enrolment\":{\"columns\":\"*, student_enrolment_id, degree_program_id, semester_id, student_id, other_details\"},\"Student_Enrolment_Courses\":{\"columns\":\"*, student_course_id, course_id, student_enrolment_id\"},\"Students\":{\"columns\":\"*, student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details\"},\"Transcript_Contents\":{\"columns\":\"*, student_course_id, transcript_id\"},\"Transcripts\":{\"columns\":\"*, transcript_id, transcript_date, other_details\"}},\"foreign_keys\":\"Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\",\"primary_keys\":\"Addresses.address_id,Courses.course_id,Departments.department_id,Degree_Programs.degree_program_id,Sections.section_id,Semesters.semester_id,Students.student_id,Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.student_course_id,Transcripts.transcript_id\"}}"}
{"sql1": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id", "sql2": "SELECT last_name FROM Students WHERE current_address_id IN (SELECT address_id FROM Addresses WHERE state_province_county = 'North Carolina') AND student_id NOT IN (SELECT student_id FROM Student_Enrolment)", "semantic equivalence": false, "schema": "{\"student_transcripts_tracking\":{\"tables\":{\"Addresses\":{\"columns\":\"*, address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details\"},\"Courses\":{\"columns\":\"*, course_id, course_name, course_description, other_details\"},\"Degree_Programs\":{\"columns\":\"*, degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details\"},\"Departments\":{\"columns\":\"*, department_id, department_name, department_description, other_details\"},\"Sections\":{\"columns\":\"*, section_id, course_id, section_name, section_description, other_details\"},\"Semesters\":{\"columns\":\"*, semester_id, semester_name, semester_description, other_details\"},\"Student_Enrolment\":{\"columns\":\"*, student_enrolment_id, degree_program_id, semester_id, student_id, other_details\"},\"Student_Enrolment_Courses\":{\"columns\":\"*, student_course_id, course_id, student_enrolment_id\"},\"Students\":{\"columns\":\"*, student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details\"},\"Transcript_Contents\":{\"columns\":\"*, student_course_id, transcript_id\"},\"Transcripts\":{\"columns\":\"*, transcript_id, transcript_date, other_details\"}},\"foreign_keys\":\"Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\",\"primary_keys\":\"Addresses.address_id,Courses.course_id,Departments.department_id,Degree_Programs.degree_program_id,Sections.section_id,Semesters.semester_id,Students.student_id,Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.student_course_id,Transcripts.transcript_id\"}}"}
{"sql1": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'", "sql2": "SELECT cell_mobile_number FROM Students WHERE first_name = \"Timmothy\" AND last_name = \"Ward\"", "semantic equivalence": false, "schema": "{\"student_transcripts_tracking\":{\"tables\":{\"Addresses\":{\"columns\":\"*, address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details\"},\"Courses\":{\"columns\":\"*, course_id, course_name, course_description, other_details\"},\"Degree_Programs\":{\"columns\":\"*, degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details\"},\"Departments\":{\"columns\":\"*, department_id, department_name, department_description, other_details\"},\"Sections\":{\"columns\":\"*, section_id, course_id, section_name, section_description, other_details\"},\"Semesters\":{\"columns\":\"*, semester_id, semester_name, semester_description, other_details\"},\"Student_Enrolment\":{\"columns\":\"*, student_enrolment_id, degree_program_id, semester_id, student_id, other_details\"},\"Student_Enrolment_Courses\":{\"columns\":\"*, student_course_id, course_id, student_enrolment_id\"},\"Students\":{\"columns\":\"*, student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details\"},\"Transcript_Contents\":{\"columns\":\"*, student_course_id, transcript_id\"},\"Transcripts\":{\"columns\":\"*, transcript_id, transcript_date, other_details\"}},\"foreign_keys\":\"Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\",\"primary_keys\":\"Addresses.address_id,Courses.course_id,Departments.department_id,Degree_Programs.degree_program_id,Sections.section_id,Semesters.semester_id,Students.student_id,Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.student_course_id,Transcripts.transcript_id\"}}"}
{"sql1": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id", "sql2": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id LIMIT 1", "semantic equivalence": false, "schema": "{\"student_transcripts_tracking\":{\"tables\":{\"Addresses\":{\"columns\":\"*, address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details\"},\"Courses\":{\"columns\":\"*, course_id, course_name, course_description, other_details\"},\"Degree_Programs\":{\"columns\":\"*, degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details\"},\"Departments\":{\"columns\":\"*, department_id, department_name, department_description, other_details\"},\"Sections\":{\"columns\":\"*, section_id, course_id, section_name, section_description, other_details\"},\"Semesters\":{\"columns\":\"*, semester_id, semester_name, semester_description, other_details\"},\"Student_Enrolment\":{\"columns\":\"*, student_enrolment_id, degree_program_id, semester_id, student_id, other_details\"},\"Student_Enrolment_Courses\":{\"columns\":\"*, student_course_id, course_id, student_enrolment_id\"},\"Students\":{\"columns\":\"*, student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details\"},\"Transcript_Contents\":{\"columns\":\"*, student_course_id, transcript_id\"},\"Transcripts\":{\"columns\":\"*, transcript_id, transcript_date, other_details\"}},\"foreign_keys\":\"Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\",\"primary_keys\":\"Addresses.address_id,Courses.course_id,Departments.department_id,Degree_Programs.degree_program_id,Sections.section_id,Semesters.semester_id,Students.student_id,Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.student_course_id,Transcripts.transcript_id\"}}"}
{"sql1": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1", "sql2": "SELECT T2.address_id, T2.line_1, T2.line_2, T2.line_3 FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id GROUP BY T2.address_id ORDER BY COUNT(*) DESC LIMIT 1;", "semantic equivalence": false, "schema": "{\"student_transcripts_tracking\":{\"tables\":{\"Addresses\":{\"columns\":\"*, address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details\"},\"Courses\":{\"columns\":\"*, course_id, course_name, course_description, other_details\"},\"Degree_Programs\":{\"columns\":\"*, degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details\"},\"Departments\":{\"columns\":\"*, department_id, department_name, department_description, other_details\"},\"Sections\":{\"columns\":\"*, section_id, course_id, section_name, section_description, other_details\"},\"Semesters\":{\"columns\":\"*, semester_id, semester_name, semester_description, other_details\"},\"Student_Enrolment\":{\"columns\":\"*, student_enrolment_id, degree_program_id, semester_id, student_id, other_details\"},\"Student_Enrolment_Courses\":{\"columns\":\"*, student_course_id, course_id, student_enrolment_id\"},\"Students\":{\"columns\":\"*, student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details\"},\"Transcript_Contents\":{\"columns\":\"*, student_course_id, transcript_id\"},\"Transcripts\":{\"columns\":\"*, transcript_id, transcript_date, other_details\"}},\"foreign_keys\":\"Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\",\"primary_keys\":\"Addresses.address_id,Courses.course_id,Departments.department_id,Degree_Programs.degree_program_id,Sections.section_id,Semesters.semester_id,Students.student_id,Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.student_course_id,Transcripts.transcript_id\"}}"}
{"sql1": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1", "sql2": "SELECT T1.student_course_id, T1.course_id, COUNT(*) FROM Student_Enrolment_Courses AS T1 JOIN Transcript_Contents AS T2 ON T1.student_course_id = T2.student_course_id GROUP BY T1.course_id ORDER BY COUNT(*) DESC LIMIT 1", "semantic equivalence": false, "schema": "{\"student_transcripts_tracking\":{\"tables\":{\"Addresses\":{\"columns\":\"*, address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details\"},\"Courses\":{\"columns\":\"*, course_id, course_name, course_description, other_details\"},\"Degree_Programs\":{\"columns\":\"*, degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details\"},\"Departments\":{\"columns\":\"*, department_id, department_name, department_description, other_details\"},\"Sections\":{\"columns\":\"*, section_id, course_id, section_name, section_description, other_details\"},\"Semesters\":{\"columns\":\"*, semester_id, semester_name, semester_description, other_details\"},\"Student_Enrolment\":{\"columns\":\"*, student_enrolment_id, degree_program_id, semester_id, student_id, other_details\"},\"Student_Enrolment_Courses\":{\"columns\":\"*, student_course_id, course_id, student_enrolment_id\"},\"Students\":{\"columns\":\"*, student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details\"},\"Transcript_Contents\":{\"columns\":\"*, student_course_id, transcript_id\"},\"Transcripts\":{\"columns\":\"*, transcript_id, transcript_date, other_details\"}},\"foreign_keys\":\"Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\",\"primary_keys\":\"Addresses.address_id,Courses.course_id,Departments.department_id,Degree_Programs.degree_program_id,Sections.section_id,Semesters.semester_id,Students.student_id,Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.student_course_id,Transcripts.transcript_id\"}}"}
{"sql1": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'", "sql2": "SELECT semester_name FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Master' INTERSECT SELECT semester_name FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor'", "semantic equivalence": false, "schema": "{\"student_transcripts_tracking\":{\"tables\":{\"Addresses\":{\"columns\":\"*, address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details\"},\"Courses\":{\"columns\":\"*, course_id, course_name, course_description, other_details\"},\"Degree_Programs\":{\"columns\":\"*, degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details\"},\"Departments\":{\"columns\":\"*, department_id, department_name, department_description, other_details\"},\"Sections\":{\"columns\":\"*, section_id, course_id, section_name, section_description, other_details\"},\"Semesters\":{\"columns\":\"*, semester_id, semester_name, semester_description, other_details\"},\"Student_Enrolment\":{\"columns\":\"*, student_enrolment_id, degree_program_id, semester_id, student_id, other_details\"},\"Student_Enrolment_Courses\":{\"columns\":\"*, student_course_id, course_id, student_enrolment_id\"},\"Students\":{\"columns\":\"*, student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details\"},\"Transcript_Contents\":{\"columns\":\"*, student_course_id, transcript_id\"},\"Transcripts\":{\"columns\":\"*, transcript_id, transcript_date, other_details\"}},\"foreign_keys\":\"Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\",\"primary_keys\":\"Addresses.address_id,Courses.course_id,Departments.department_id,Degree_Programs.degree_program_id,Sections.section_id,Semesters.semester_id,Students.student_id,Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.student_course_id,Transcripts.transcript_id\"}}"}
{"sql1": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'", "sql2": "SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN ( SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name IN ('Masters', 'Bachelors') ) GROUP BY semester_id HAVING COUNT(DISTINCT degree_program_id) > 1;", "semantic equivalence": false, "schema": "{\"student_transcripts_tracking\":{\"tables\":{\"Addresses\":{\"columns\":\"*, address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details\"},\"Courses\":{\"columns\":\"*, course_id, course_name, course_description, other_details\"},\"Degree_Programs\":{\"columns\":\"*, degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details\"},\"Departments\":{\"columns\":\"*, department_id, department_name, department_description, other_details\"},\"Sections\":{\"columns\":\"*, section_id, course_id, section_name, section_description, other_details\"},\"Semesters\":{\"columns\":\"*, semester_id, semester_name, semester_description, other_details\"},\"Student_Enrolment\":{\"columns\":\"*, student_enrolment_id, degree_program_id, semester_id, student_id, other_details\"},\"Student_Enrolment_Courses\":{\"columns\":\"*, student_course_id, course_id, student_enrolment_id\"},\"Students\":{\"columns\":\"*, student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details\"},\"Transcript_Contents\":{\"columns\":\"*, student_course_id, transcript_id\"},\"Transcripts\":{\"columns\":\"*, transcript_id, transcript_date, other_details\"}},\"foreign_keys\":\"Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\",\"primary_keys\":\"Addresses.address_id,Courses.course_id,Departments.department_id,Degree_Programs.degree_program_id,Sections.section_id,Semesters.semester_id,Students.student_id,Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.student_course_id,Transcripts.transcript_id\"}}"}
{"sql1": "SELECT count(DISTINCT current_address_id) FROM Students", "sql2": "SELECT DISTINCT T1.* FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id OR T1.address_id = T2.permanent_address_id", "semantic equivalence": false, "schema": "{\"student_transcripts_tracking\":{\"tables\":{\"Addresses\":{\"columns\":\"*, address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details\"},\"Courses\":{\"columns\":\"*, course_id, course_name, course_description, other_details\"},\"Degree_Programs\":{\"columns\":\"*, degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details\"},\"Departments\":{\"columns\":\"*, department_id, department_name, department_description, other_details\"},\"Sections\":{\"columns\":\"*, section_id, course_id, section_name, section_description, other_details\"},\"Semesters\":{\"columns\":\"*, semester_id, semester_name, semester_description, other_details\"},\"Student_Enrolment\":{\"columns\":\"*, student_enrolment_id, degree_program_id, semester_id, student_id, other_details\"},\"Student_Enrolment_Courses\":{\"columns\":\"*, student_course_id, course_id, student_enrolment_id\"},\"Students\":{\"columns\":\"*, student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details\"},\"Transcript_Contents\":{\"columns\":\"*, student_course_id, transcript_id\"},\"Transcripts\":{\"columns\":\"*, transcript_id, transcript_date, other_details\"}},\"foreign_keys\":\"Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\",\"primary_keys\":\"Addresses.address_id,Courses.course_id,Departments.department_id,Degree_Programs.degree_program_id,Sections.section_id,Semesters.semester_id,Students.student_id,Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.student_course_id,Transcripts.transcript_id\"}}"}
{"sql1": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC", "sql2": "SELECT * FROM Students ORDER BY first_name DESC, middle_name DESC, last_name DESC", "semantic equivalence": false, "schema": "{\"student_transcripts_tracking\":{\"tables\":{\"Addresses\":{\"columns\":\"*, address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details\"},\"Courses\":{\"columns\":\"*, course_id, course_name, course_description, other_details\"},\"Degree_Programs\":{\"columns\":\"*, degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details\"},\"Departments\":{\"columns\":\"*, department_id, department_name, department_description, other_details\"},\"Sections\":{\"columns\":\"*, section_id, course_id, section_name, section_description, other_details\"},\"Semesters\":{\"columns\":\"*, semester_id, semester_name, semester_description, other_details\"},\"Student_Enrolment\":{\"columns\":\"*, student_enrolment_id, degree_program_id, semester_id, student_id, other_details\"},\"Student_Enrolment_Courses\":{\"columns\":\"*, student_course_id, course_id, student_enrolment_id\"},\"Students\":{\"columns\":\"*, student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details\"},\"Transcript_Contents\":{\"columns\":\"*, student_course_id, transcript_id\"},\"Transcripts\":{\"columns\":\"*, transcript_id, transcript_date, other_details\"}},\"foreign_keys\":\"Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\",\"primary_keys\":\"Addresses.address_id,Courses.course_id,Departments.department_id,Degree_Programs.degree_program_id,Sections.section_id,Semesters.semester_id,Students.student_id,Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.student_course_id,Transcripts.transcript_id\"}}"}
{"sql1": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC", "sql2": "SELECT other_student_details FROM Students ORDER BY last_name DESC, first_name DESC", "semantic equivalence": false, "schema": "{\"student_transcripts_tracking\":{\"tables\":{\"Addresses\":{\"columns\":\"*, address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details\"},\"Courses\":{\"columns\":\"*, course_id, course_name, course_description, other_details\"},\"Degree_Programs\":{\"columns\":\"*, degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details\"},\"Departments\":{\"columns\":\"*, department_id, department_name, department_description, other_details\"},\"Sections\":{\"columns\":\"*, section_id, course_id, section_name, section_description, other_details\"},\"Semesters\":{\"columns\":\"*, semester_id, semester_name, semester_description, other_details\"},\"Student_Enrolment\":{\"columns\":\"*, student_enrolment_id, degree_program_id, semester_id, student_id, other_details\"},\"Student_Enrolment_Courses\":{\"columns\":\"*, student_course_id, course_id, student_enrolment_id\"},\"Students\":{\"columns\":\"*, student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details\"},\"Transcript_Contents\":{\"columns\":\"*, student_course_id, transcript_id\"},\"Transcripts\":{\"columns\":\"*, transcript_id, transcript_date, other_details\"}},\"foreign_keys\":\"Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\",\"primary_keys\":\"Addresses.address_id,Courses.course_id,Departments.department_id,Degree_Programs.degree_program_id,Sections.section_id,Semesters.semester_id,Students.student_id,Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.student_course_id,Transcripts.transcript_id\"}}"}
{"sql1": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", "sql2": "SELECT first_name FROM Students WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582'", "semantic equivalence": false, "schema": "{\"student_transcripts_tracking\":{\"tables\":{\"Addresses\":{\"columns\":\"*, address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details\"},\"Courses\":{\"columns\":\"*, course_id, course_name, course_description, other_details\"},\"Degree_Programs\":{\"columns\":\"*, degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details\"},\"Departments\":{\"columns\":\"*, department_id, department_name, department_description, other_details\"},\"Sections\":{\"columns\":\"*, section_id, course_id, section_name, section_description, other_details\"},\"Semesters\":{\"columns\":\"*, semester_id, semester_name, semester_description, other_details\"},\"Student_Enrolment\":{\"columns\":\"*, student_enrolment_id, degree_program_id, semester_id, student_id, other_details\"},\"Student_Enrolment_Courses\":{\"columns\":\"*, student_course_id, course_id, student_enrolment_id\"},\"Students\":{\"columns\":\"*, student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details\"},\"Transcript_Contents\":{\"columns\":\"*, student_course_id, transcript_id\"},\"Transcripts\":{\"columns\":\"*, transcript_id, transcript_date, other_details\"}},\"foreign_keys\":\"Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\",\"primary_keys\":\"Addresses.address_id,Courses.course_id,Departments.department_id,Degree_Programs.degree_program_id,Sections.section_id,Semesters.semester_id,Students.student_id,Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.student_course_id,Transcripts.transcript_id\"}}"}
{"sql1": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", "sql2": "SELECT first_name FROM Students WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = \"Haiti\") OR cell_mobile_number = \"09700166582\"", "semantic equivalence": false, "schema": "{\"student_transcripts_tracking\":{\"tables\":{\"Addresses\":{\"columns\":\"*, address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details\"},\"Courses\":{\"columns\":\"*, course_id, course_name, course_description, other_details\"},\"Degree_Programs\":{\"columns\":\"*, degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details\"},\"Departments\":{\"columns\":\"*, department_id, department_name, department_description, other_details\"},\"Sections\":{\"columns\":\"*, section_id, course_id, section_name, section_description, other_details\"},\"Semesters\":{\"columns\":\"*, semester_id, semester_name, semester_description, other_details\"},\"Student_Enrolment\":{\"columns\":\"*, student_enrolment_id, degree_program_id, semester_id, student_id, other_details\"},\"Student_Enrolment_Courses\":{\"columns\":\"*, student_course_id, course_id, student_enrolment_id\"},\"Students\":{\"columns\":\"*, student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details\"},\"Transcript_Contents\":{\"columns\":\"*, student_course_id, transcript_id\"},\"Transcripts\":{\"columns\":\"*, transcript_id, transcript_date, other_details\"}},\"foreign_keys\":\"Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\",\"primary_keys\":\"Addresses.address_id,Courses.course_id,Departments.department_id,Degree_Programs.degree_program_id,Sections.section_id,Semesters.semester_id,Students.student_id,Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.student_course_id,Transcripts.transcript_id\"}}"}
{"sql1": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";", "sql2": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle\"", "semantic equivalence": false, "schema": "{\"tvshow\":{\"tables\":{\"Cartoon\":{\"columns\":\"*, id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel\"},\"TV_Channel\":{\"columns\":\"*, id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option\"},\"TV_series\":{\"columns\":\"*, id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel\"}},\"foreign_keys\":\"TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id\",\"primary_keys\":\"TV_Channel.id,TV_series.id,Cartoon.id\"}}"}
{"sql1": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "sql2": "SELECT T1.Package_Option , T1.series_name FROM TV_Channel AS T1 WHERE T1.Hight_definition_TV = \"Yes\"", "semantic equivalence": false, "schema": "{\"tvshow\":{\"tables\":{\"Cartoon\":{\"columns\":\"*, id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel\"},\"TV_Channel\":{\"columns\":\"*, id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option\"},\"TV_series\":{\"columns\":\"*, id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel\"}},\"foreign_keys\":\"TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id\",\"primary_keys\":\"TV_Channel.id,TV_series.id,Cartoon.id\"}}"}
{"sql1": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "sql2": "SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.Hight_definition_TV = 'Yes';", "semantic equivalence": false, "schema": "{\"tvshow\":{\"tables\":{\"Cartoon\":{\"columns\":\"*, id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel\"},\"TV_Channel\":{\"columns\":\"*, id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option\"},\"TV_series\":{\"columns\":\"*, id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel\"}},\"foreign_keys\":\"TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id\",\"primary_keys\":\"TV_Channel.id,TV_series.id,Cartoon.id\"}}"}
{"sql1": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "sql2": "SELECT Country FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey')", "semantic equivalence": false, "schema": "{\"tvshow\":{\"tables\":{\"Cartoon\":{\"columns\":\"*, id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel\"},\"TV_Channel\":{\"columns\":\"*, id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option\"},\"TV_series\":{\"columns\":\"*, id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel\"}},\"foreign_keys\":\"TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id\",\"primary_keys\":\"TV_Channel.id,TV_series.id,Cartoon.id\"}}"}
{"sql1": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "sql2": "SELECT \"Country\" FROM \"TV_Channel\" WHERE \"id\" NOT IN (SELECT \"Channel\" FROM \"Cartoon\" WHERE \"Written_by\" = 'Todd Casey')", "semantic equivalence": false, "schema": "{\"tvshow\":{\"tables\":{\"Cartoon\":{\"columns\":\"*, id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel\"},\"TV_Channel\":{\"columns\":\"*, id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option\"},\"TV_series\":{\"columns\":\"*, id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel\"}},\"foreign_keys\":\"TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id\",\"primary_keys\":\"TV_Channel.id,TV_series.id,Cartoon.id\"}}"}
{"sql1": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'", "sql2": "SELECT T1.series_name, T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by IN (\"Ben Jones\", \"Michael Chang\")", "semantic equivalence": false, "schema": "{\"tvshow\":{\"tables\":{\"Cartoon\":{\"columns\":\"*, id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel\"},\"TV_Channel\":{\"columns\":\"*, id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option\"},\"TV_series\":{\"columns\":\"*, id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel\"}},\"foreign_keys\":\"TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id\",\"primary_keys\":\"TV_Channel.id,TV_series.id,Cartoon.id\"}}"}
{"sql1": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2", "sql2": "SELECT Country FROM TV_Channel GROUP BY Country HAVING count(id) > 2", "semantic equivalence": false, "schema": "{\"tvshow\":{\"tables\":{\"Cartoon\":{\"columns\":\"*, id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel\"},\"TV_Channel\":{\"columns\":\"*, id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option\"},\"TV_series\":{\"columns\":\"*, id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel\"}},\"foreign_keys\":\"TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id\",\"primary_keys\":\"TV_Channel.id,TV_series.id,Cartoon.id\"}}"}
{"sql1": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2", "sql2": "SELECT \"Channel\" FROM \"TV_series\" GROUP BY \"Channel\" HAVING count(*) > 2;", "semantic equivalence": false, "schema": "{\"tvshow\":{\"tables\":{\"Cartoon\":{\"columns\":\"*, id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel\"},\"TV_Channel\":{\"columns\":\"*, id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option\"},\"TV_series\":{\"columns\":\"*, id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel\"}},\"foreign_keys\":\"TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id\",\"primary_keys\":\"TV_Channel.id,TV_series.id,Cartoon.id\"}}"}
{"sql1": "SELECT count(*) FROM area_code_state", "sql2": "SELECT count(distinct state) FROM AREA_CODE_STATE", "semantic equivalence": false, "schema": "{\"voter_1\":{\"tables\":{\"AREA_CODE_STATE\":{\"columns\":\"*, area_code, state\"},\"CONTESTANTS\":{\"columns\":\"*, contestant_number, contestant_name\"},\"VOTES\":{\"columns\":\"*, vote_id, phone_number, state, contestant_number, created\"}},\"foreign_keys\":\"VOTES.contestant_number = CONTESTANTS.contestant_number,VOTES.state = AREA_CODE_STATE.state\",\"primary_keys\":\"AREA_CODE_STATE.area_code,CONTESTANTS.contestant_number,VOTES.vote_id\"}}"}
{"sql1": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"", "sql2": "SELECT count(*) FROM country WHERE GovernmentForm LIKE \"%republic%\"", "semantic equivalence": false, "schema": "{\"world_1\":{\"tables\":{\"city\":{\"columns\":\"*, ID, Name, CountryCode, District, Population\"},\"country\":{\"columns\":\"*, Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2\"},\"countrylanguage\":{\"columns\":\"*, CountryCode, Language, IsOfficial, Percentage\"},\"sqlite_sequence\":{\"columns\":\"*, name, seq\"}},\"foreign_keys\":\"city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code\",\"primary_keys\":\"city.ID,country.Code,countrylanguage.CountryCode\"}}"}
{"sql1": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"", "sql2": "SELECT count(*) FROM country WHERE GovernmentForm LIKE \"%Republic%\"", "semantic equivalence": false, "schema": "{\"world_1\":{\"tables\":{\"city\":{\"columns\":\"*, ID, Name, CountryCode, District, Population\"},\"country\":{\"columns\":\"*, Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2\"},\"countrylanguage\":{\"columns\":\"*, CountryCode, Language, IsOfficial, Percentage\"},\"sqlite_sequence\":{\"columns\":\"*, name, seq\"}},\"foreign_keys\":\"city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code\",\"primary_keys\":\"city.ID,country.Code,countrylanguage.CountryCode\"}}"}
{"sql1": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "sql2": "SELECT T2.Continent FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Name = \"Anguilla\"", "semantic equivalence": false, "schema": "{\"world_1\":{\"tables\":{\"city\":{\"columns\":\"*, ID, Name, CountryCode, District, Population\"},\"country\":{\"columns\":\"*, Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2\"},\"countrylanguage\":{\"columns\":\"*, CountryCode, Language, IsOfficial, Percentage\"},\"sqlite_sequence\":{\"columns\":\"*, name, seq\"}},\"foreign_keys\":\"city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code\",\"primary_keys\":\"city.ID,country.Code,countrylanguage.CountryCode\"}}"}
{"sql1": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "sql2": "SELECT District FROM city WHERE Name = \"Kabul\";", "semantic equivalence": false, "schema": "{\"world_1\":{\"tables\":{\"city\":{\"columns\":\"*, ID, Name, CountryCode, District, Population\"},\"country\":{\"columns\":\"*, Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2\"},\"countrylanguage\":{\"columns\":\"*, CountryCode, Language, IsOfficial, Percentage\"},\"sqlite_sequence\":{\"columns\":\"*, name, seq\"}},\"foreign_keys\":\"city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code\",\"primary_keys\":\"city.ID,country.Code,countrylanguage.CountryCode\"}}"}
{"sql1": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "sql2": "SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = \"Aruba\") AND IsOfficial = \"T\"", "semantic equivalence": false, "schema": "{\"world_1\":{\"tables\":{\"city\":{\"columns\":\"*, ID, Name, CountryCode, District, Population\"},\"country\":{\"columns\":\"*, Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2\"},\"countrylanguage\":{\"columns\":\"*, CountryCode, Language, IsOfficial, Percentage\"},\"sqlite_sequence\":{\"columns\":\"*, name, seq\"}},\"foreign_keys\":\"city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code\",\"primary_keys\":\"city.ID,country.Code,countrylanguage.CountryCode\"}}"}
{"sql1": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "sql2": "SELECT avg(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%'", "semantic equivalence": false, "schema": "{\"world_1\":{\"tables\":{\"city\":{\"columns\":\"*, ID, Name, CountryCode, District, Population\"},\"country\":{\"columns\":\"*, Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2\"},\"countrylanguage\":{\"columns\":\"*, CountryCode, Language, IsOfficial, Percentage\"},\"sqlite_sequence\":{\"columns\":\"*, name, seq\"}},\"foreign_keys\":\"city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code\",\"primary_keys\":\"city.ID,country.Code,countrylanguage.CountryCode\"}}"}
{"sql1": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "sql2": "SELECT avg(`LifeExpectancy`) FROM `country` WHERE `Continent` = 'Africa' AND `GovernmentForm` LIKE '%Republic%'", "semantic equivalence": false, "schema": "{\"world_1\":{\"tables\":{\"city\":{\"columns\":\"*, ID, Name, CountryCode, District, Population\"},\"country\":{\"columns\":\"*, Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2\"},\"countrylanguage\":{\"columns\":\"*, CountryCode, Language, IsOfficial, Percentage\"},\"sqlite_sequence\":{\"columns\":\"*, name, seq\"}},\"foreign_keys\":\"city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code\",\"primary_keys\":\"city.ID,country.Code,countrylanguage.CountryCode\"}}"}
{"sql1": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "sql2": "SELECT avg(GNP), sum(Population) FROM country WHERE GovernmentForm = 'US territory'", "semantic equivalence": false, "schema": "{\"world_1\":{\"tables\":{\"city\":{\"columns\":\"*, ID, Name, CountryCode, District, Population\"},\"country\":{\"columns\":\"*, Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2\"},\"countrylanguage\":{\"columns\":\"*, CountryCode, Language, IsOfficial, Percentage\"},\"sqlite_sequence\":{\"columns\":\"*, name, seq\"}},\"foreign_keys\":\"city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code\",\"primary_keys\":\"city.ID,country.Code,countrylanguage.CountryCode\"}}"}
{"sql1": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1", "sql2": "SELECT T2.Name FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code GROUP BY T1.CountryCode ORDER BY COUNT(*) DESC LIMIT 1;", "semantic equivalence": false, "schema": "{\"world_1\":{\"tables\":{\"city\":{\"columns\":\"*, ID, Name, CountryCode, District, Population\"},\"country\":{\"columns\":\"*, Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2\"},\"countrylanguage\":{\"columns\":\"*, CountryCode, Language, IsOfficial, Percentage\"},\"sqlite_sequence\":{\"columns\":\"*, name, seq\"}},\"foreign_keys\":\"city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code\",\"primary_keys\":\"city.ID,country.Code,countrylanguage.CountryCode\"}}"}
{"sql1": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")", "sql2": "SELECT count(DISTINCT CountryCode) FROM countrylanguage WHERE Language IN ('English', 'Dutch')", "semantic equivalence": false, "schema": "{\"world_1\":{\"tables\":{\"city\":{\"columns\":\"*, ID, Name, CountryCode, District, Population\"},\"country\":{\"columns\":\"*, Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2\"},\"countrylanguage\":{\"columns\":\"*, CountryCode, Language, IsOfficial, Percentage\"},\"sqlite_sequence\":{\"columns\":\"*, name, seq\"}},\"foreign_keys\":\"city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code\",\"primary_keys\":\"city.ID,country.Code,countrylanguage.CountryCode\"}}"}
{"sql1": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"", "sql2": "SELECT `Region` FROM `country` WHERE `Code` IN (SELECT `CountryCode` FROM `countrylanguage` WHERE `Language` IN ('English', 'Dutch'))", "semantic equivalence": false, "schema": "{\"world_1\":{\"tables\":{\"city\":{\"columns\":\"*, ID, Name, CountryCode, District, Population\"},\"country\":{\"columns\":\"*, Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2\"},\"countrylanguage\":{\"columns\":\"*, CountryCode, Language, IsOfficial, Percentage\"},\"sqlite_sequence\":{\"columns\":\"*, name, seq\"}},\"foreign_keys\":\"city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code\",\"primary_keys\":\"city.ID,country.Code,countrylanguage.CountryCode\"}}"}
{"sql1": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\"", "sql2": "SELECT T2.Name FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language IN ('English', 'Dutch') AND T1.IsOfficial = 'T'", "semantic equivalence": false, "schema": "{\"world_1\":{\"tables\":{\"city\":{\"columns\":\"*, ID, Name, CountryCode, District, Population\"},\"country\":{\"columns\":\"*, Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2\"},\"countrylanguage\":{\"columns\":\"*, CountryCode, Language, IsOfficial, Percentage\"},\"sqlite_sequence\":{\"columns\":\"*, name, seq\"}},\"foreign_keys\":\"city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code\",\"primary_keys\":\"city.ID,country.Code,countrylanguage.CountryCode\"}}"}
{"sql1": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"", "sql2": "SELECT `Name` FROM country WHERE `Code` IN (SELECT `CountryCode` FROM `countrylanguage` WHERE `Language` IN ('English', 'Dutch') AND `IsOfficial` = 'T')", "semantic equivalence": false, "schema": "{\"world_1\":{\"tables\":{\"city\":{\"columns\":\"*, ID, Name, CountryCode, District, Population\"},\"country\":{\"columns\":\"*, Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2\"},\"countrylanguage\":{\"columns\":\"*, CountryCode, Language, IsOfficial, Percentage\"},\"sqlite_sequence\":{\"columns\":\"*, name, seq\"}},\"foreign_keys\":\"city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code\",\"primary_keys\":\"city.ID,country.Code,countrylanguage.CountryCode\"}}"}
{"sql1": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1", "sql2": "SELECT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' ORDER BY city.Population DESC LIMIT 1;", "semantic equivalence": false, "schema": "{\"world_1\":{\"tables\":{\"city\":{\"columns\":\"*, ID, Name, CountryCode, District, Population\"},\"country\":{\"columns\":\"*, Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2\"},\"countrylanguage\":{\"columns\":\"*, CountryCode, Language, IsOfficial, Percentage\"},\"sqlite_sequence\":{\"columns\":\"*, name, seq\"}},\"foreign_keys\":\"city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code\",\"primary_keys\":\"city.ID,country.Code,countrylanguage.CountryCode\"}}"}
{"sql1": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1", "sql2": "SELECT T1.Name FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = 'English' ORDER BY T1.Population DESC LIMIT 1;", "semantic equivalence": false, "schema": "{\"world_1\":{\"tables\":{\"city\":{\"columns\":\"*, ID, Name, CountryCode, District, Population\"},\"country\":{\"columns\":\"*, Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2\"},\"countrylanguage\":{\"columns\":\"*, CountryCode, Language, IsOfficial, Percentage\"},\"sqlite_sequence\":{\"columns\":\"*, name, seq\"}},\"foreign_keys\":\"city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code\",\"primary_keys\":\"city.ID,country.Code,countrylanguage.CountryCode\"}}"}
{"sql1": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "sql2": "SELECT Language FROM countrylanguage WHERE IsOfficial = 'T' AND CountryCode = (SELECT Code FROM country WHERE HeadOfState = 'Beatrix')", "semantic equivalence": false, "schema": "{\"world_1\":{\"tables\":{\"city\":{\"columns\":\"*, ID, Name, CountryCode, District, Population\"},\"country\":{\"columns\":\"*, Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2\"},\"countrylanguage\":{\"columns\":\"*, CountryCode, Language, IsOfficial, Percentage\"},\"sqlite_sequence\":{\"columns\":\"*, name, seq\"}},\"foreign_keys\":\"city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code\",\"primary_keys\":\"city.ID,country.Code,countrylanguage.CountryCode\"}}"}
{"sql1": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")", "sql2": "SELECT `Name` FROM `country` WHERE `SurfaceArea` > (SELECT max(`SurfaceArea`) FROM `country` WHERE `Continent` = 'Europe')", "semantic equivalence": false, "schema": "{\"world_1\":{\"tables\":{\"city\":{\"columns\":\"*, ID, Name, CountryCode, District, Population\"},\"country\":{\"columns\":\"*, Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2\"},\"countrylanguage\":{\"columns\":\"*, CountryCode, Language, IsOfficial, Percentage\"},\"sqlite_sequence\":{\"columns\":\"*, name, seq\"}},\"foreign_keys\":\"city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code\",\"primary_keys\":\"city.ID,country.Code,countrylanguage.CountryCode\"}}"}
{"sql1": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")", "sql2": "SELECT Name FROM country WHERE SurfaceArea > (SELECT max(SurfaceArea) FROM country WHERE Continent = 'Europe')", "semantic equivalence": false, "schema": "{\"world_1\":{\"tables\":{\"city\":{\"columns\":\"*, ID, Name, CountryCode, District, Population\"},\"country\":{\"columns\":\"*, Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2\"},\"countrylanguage\":{\"columns\":\"*, CountryCode, Language, IsOfficial, Percentage\"},\"sqlite_sequence\":{\"columns\":\"*, name, seq\"}},\"foreign_keys\":\"city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code\",\"primary_keys\":\"city.ID,country.Code,countrylanguage.CountryCode\"}}"}
{"sql1": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")", "sql2": "SELECT Name FROM country WHERE Continent = 'Africa' AND Population < (SELECT min(Population) FROM country WHERE Continent = 'Asia')", "semantic equivalence": false, "schema": "{\"world_1\":{\"tables\":{\"city\":{\"columns\":\"*, ID, Name, CountryCode, District, Population\"},\"country\":{\"columns\":\"*, Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2\"},\"countrylanguage\":{\"columns\":\"*, CountryCode, Language, IsOfficial, Percentage\"},\"sqlite_sequence\":{\"columns\":\"*, name, seq\"}},\"foreign_keys\":\"city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code\",\"primary_keys\":\"city.ID,country.Code,countrylanguage.CountryCode\"}}"}
{"sql1": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")", "sql2": "SELECT `Name` FROM `country` WHERE `Continent` = 'Asia' AND `Population` > (SELECT MAX(`Population`) FROM `country` WHERE `Continent` = 'Africa')", "semantic equivalence": false, "schema": "{\"world_1\":{\"tables\":{\"city\":{\"columns\":\"*, ID, Name, CountryCode, District, Population\"},\"country\":{\"columns\":\"*, Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2\"},\"countrylanguage\":{\"columns\":\"*, CountryCode, Language, IsOfficial, Percentage\"},\"sqlite_sequence\":{\"columns\":\"*, name, seq\"}},\"foreign_keys\":\"city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code\",\"primary_keys\":\"city.ID,country.Code,countrylanguage.CountryCode\"}}"}
{"sql1": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "sql2": "SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')", "semantic equivalence": false, "schema": "{\"world_1\":{\"tables\":{\"city\":{\"columns\":\"*, ID, Name, CountryCode, District, Population\"},\"country\":{\"columns\":\"*, Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2\"},\"countrylanguage\":{\"columns\":\"*, CountryCode, Language, IsOfficial, Percentage\"},\"sqlite_sequence\":{\"columns\":\"*, name, seq\"}},\"foreign_keys\":\"city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code\",\"primary_keys\":\"city.ID,country.Code,countrylanguage.CountryCode\"}}"}
{"sql1": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "sql2": "SELECT CountryCode FROM countrylanguage WHERE Language != 'English'", "semantic equivalence": false, "schema": "{\"world_1\":{\"tables\":{\"city\":{\"columns\":\"*, ID, Name, CountryCode, District, Population\"},\"country\":{\"columns\":\"*, Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2\"},\"countrylanguage\":{\"columns\":\"*, CountryCode, Language, IsOfficial, Percentage\"},\"sqlite_sequence\":{\"columns\":\"*, name, seq\"}},\"foreign_keys\":\"city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code\",\"primary_keys\":\"city.ID,country.Code,countrylanguage.CountryCode\"}}"}
{"sql1": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "sql2": "SELECT CountryCode FROM countrylanguage WHERE Language != 'English'", "semantic equivalence": false, "schema": "{\"world_1\":{\"tables\":{\"city\":{\"columns\":\"*, ID, Name, CountryCode, District, Population\"},\"country\":{\"columns\":\"*, Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2\"},\"countrylanguage\":{\"columns\":\"*, CountryCode, Language, IsOfficial, Percentage\"},\"sqlite_sequence\":{\"columns\":\"*, name, seq\"}},\"foreign_keys\":\"city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code\",\"primary_keys\":\"city.ID,country.Code,countrylanguage.CountryCode\"}}"}
{"sql1": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "sql2": "SELECT `Code` FROM `country` WHERE `Code` NOT IN (SELECT `CountryCode` FROM `countrylanguage` WHERE `Language` = 'English') AND `GovernmentForm` NOT LIKE '%Republic%'", "semantic equivalence": false, "schema": "{\"world_1\":{\"tables\":{\"city\":{\"columns\":\"*, ID, Name, CountryCode, District, Population\"},\"country\":{\"columns\":\"*, Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2\"},\"countrylanguage\":{\"columns\":\"*, CountryCode, Language, IsOfficial, Percentage\"},\"sqlite_sequence\":{\"columns\":\"*, name, seq\"}},\"foreign_keys\":\"city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code\",\"primary_keys\":\"city.ID,country.Code,countrylanguage.CountryCode\"}}"}
{"sql1": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')", "sql2": "SELECT City.Name AS 'City Name' FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND (countrylanguage.Language != 'English' OR countrylanguage.IsOfficial != 'T')", "semantic equivalence": false, "schema": "{\"world_1\":{\"tables\":{\"city\":{\"columns\":\"*, ID, Name, CountryCode, District, Population\"},\"country\":{\"columns\":\"*, Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2\"},\"countrylanguage\":{\"columns\":\"*, CountryCode, Language, IsOfficial, Percentage\"},\"sqlite_sequence\":{\"columns\":\"*, name, seq\"}},\"foreign_keys\":\"city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code\",\"primary_keys\":\"city.ID,country.Code,countrylanguage.CountryCode\"}}"}
{"sql1": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')", "sql2": "SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND (countrylanguage.Language <> 'English' OR countrylanguage.IsOfficial = 'F')", "semantic equivalence": false, "schema": "{\"world_1\":{\"tables\":{\"city\":{\"columns\":\"*, ID, Name, CountryCode, District, Population\"},\"country\":{\"columns\":\"*, Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2\"},\"countrylanguage\":{\"columns\":\"*, CountryCode, Language, IsOfficial, Percentage\"},\"sqlite_sequence\":{\"columns\":\"*, name, seq\"}},\"foreign_keys\":\"city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code\",\"primary_keys\":\"city.ID,country.Code,countrylanguage.CountryCode\"}}"}
{"sql1": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"", "sql2": "SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T' AND country.Continent = 'Asia'", "semantic equivalence": false, "schema": "{\"world_1\":{\"tables\":{\"city\":{\"columns\":\"*, ID, Name, CountryCode, District, Population\"},\"country\":{\"columns\":\"*, Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2\"},\"countrylanguage\":{\"columns\":\"*, CountryCode, Language, IsOfficial, Percentage\"},\"sqlite_sequence\":{\"columns\":\"*, name, seq\"}},\"foreign_keys\":\"city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code\",\"primary_keys\":\"city.ID,country.Code,countrylanguage.CountryCode\"}}"}
{"sql1": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "sql2": "SELECT avg(t1.LifeExpectancy) , t1.GovernmentForm, sum(t1.Population) FROM country AS t1 GROUP BY t1.GovernmentForm HAVING avg(t1.LifeExpectancy) > 72", "semantic equivalence": false, "schema": "{\"world_1\":{\"tables\":{\"city\":{\"columns\":\"*, ID, Name, CountryCode, District, Population\"},\"country\":{\"columns\":\"*, Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2\"},\"countrylanguage\":{\"columns\":\"*, CountryCode, Language, IsOfficial, Percentage\"},\"sqlite_sequence\":{\"columns\":\"*, name, seq\"}},\"foreign_keys\":\"city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code\",\"primary_keys\":\"city.ID,country.Code,countrylanguage.CountryCode\"}}"}
{"sql1": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000", "sql2": "SELECT sum(Population) , avg(SurfaceArea) FROM country WHERE Continent = \"North America\" AND SurfaceArea > 3000", "semantic equivalence": false, "schema": "{\"world_1\":{\"tables\":{\"city\":{\"columns\":\"*, ID, Name, CountryCode, District, Population\"},\"country\":{\"columns\":\"*, Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2\"},\"countrylanguage\":{\"columns\":\"*, CountryCode, Language, IsOfficial, Percentage\"},\"sqlite_sequence\":{\"columns\":\"*, name, seq\"}},\"foreign_keys\":\"city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code\",\"primary_keys\":\"city.ID,country.Code,countrylanguage.CountryCode\"}}"}
{"sql1": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000", "sql2": "SELECT SUM(Population), AVG(SurfaceArea) FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000", "semantic equivalence": false, "schema": "{\"world_1\":{\"tables\":{\"city\":{\"columns\":\"*, ID, Name, CountryCode, District, Population\"},\"country\":{\"columns\":\"*, Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2\"},\"countrylanguage\":{\"columns\":\"*, CountryCode, Language, IsOfficial, Percentage\"},\"sqlite_sequence\":{\"columns\":\"*, name, seq\"}},\"foreign_keys\":\"city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code\",\"primary_keys\":\"city.ID,country.Code,countrylanguage.CountryCode\"}}"}
{"sql1": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode", "sql2": "SELECT CountryCode, Language FROM countrylanguage WHERE Percentage = ( SELECT MAX(Percentage) FROM countrylanguage GROUP BY CountryCode )", "semantic equivalence": false, "schema": "{\"world_1\":{\"tables\":{\"city\":{\"columns\":\"*, ID, Name, CountryCode, District, Population\"},\"country\":{\"columns\":\"*, Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2\"},\"countrylanguage\":{\"columns\":\"*, CountryCode, Language, IsOfficial, Percentage\"},\"sqlite_sequence\":{\"columns\":\"*, name, seq\"}},\"foreign_keys\":\"city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code\",\"primary_keys\":\"city.ID,country.Code,countrylanguage.CountryCode\"}}"}
{"sql1": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "sql2": "SELECT count(*) FROM countrylanguage WHERE Language = 'Spanish' AND Percentage = (SELECT max(Percentage) FROM countrylanguage WHERE Language = 'Spanish')", "semantic equivalence": false, "schema": "{\"world_1\":{\"tables\":{\"city\":{\"columns\":\"*, ID, Name, CountryCode, District, Population\"},\"country\":{\"columns\":\"*, Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2\"},\"countrylanguage\":{\"columns\":\"*, CountryCode, Language, IsOfficial, Percentage\"},\"sqlite_sequence\":{\"columns\":\"*, name, seq\"}},\"foreign_keys\":\"city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code\",\"primary_keys\":\"city.ID,country.Code,countrylanguage.CountryCode\"}}"}
{"sql1": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "sql2": "SELECT count(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Spanish' AND T2.IsOfficial = 'T'", "semantic equivalence": false, "schema": "{\"world_1\":{\"tables\":{\"city\":{\"columns\":\"*, ID, Name, CountryCode, District, Population\"},\"country\":{\"columns\":\"*, Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2\"},\"countrylanguage\":{\"columns\":\"*, CountryCode, Language, IsOfficial, Percentage\"},\"sqlite_sequence\":{\"columns\":\"*, name, seq\"}},\"foreign_keys\":\"city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code\",\"primary_keys\":\"city.ID,country.Code,countrylanguage.CountryCode\"}}"}
{"sql1": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "sql2": "SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' ORDER BY Percentage DESC", "semantic equivalence": false, "schema": "{\"world_1\":{\"tables\":{\"city\":{\"columns\":\"*, ID, Name, CountryCode, District, Population\"},\"country\":{\"columns\":\"*, Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2\"},\"countrylanguage\":{\"columns\":\"*, CountryCode, Language, IsOfficial, Percentage\"},\"sqlite_sequence\":{\"columns\":\"*, name, seq\"}},\"foreign_keys\":\"city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code\",\"primary_keys\":\"city.ID,country.Code,countrylanguage.CountryCode\"}}"}
{"sql1": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "sql2": "SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T'", "semantic equivalence": false, "schema": "{\"world_1\":{\"tables\":{\"city\":{\"columns\":\"*, ID, Name, CountryCode, District, Population\"},\"country\":{\"columns\":\"*, Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2\"},\"countrylanguage\":{\"columns\":\"*, CountryCode, Language, IsOfficial, Percentage\"},\"sqlite_sequence\":{\"columns\":\"*, name, seq\"}},\"foreign_keys\":\"city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code\",\"primary_keys\":\"city.ID,country.Code,countrylanguage.CountryCode\"}}"}
{"sql1": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1", "sql2": "SELECT t1.Name FROM conductor AS t1 JOIN orchestra AS t2 ON t1.Conductor_ID = t2.Conductor_ID GROUP BY t1.Name ORDER BY count(*) DESC LIMIT 1", "semantic equivalence": false, "schema": "{\"orchestra\":{\"tables\":{\"conductor\":{\"columns\":\"*, Conductor_ID, Name, Age, Nationality, Year_of_Work\"},\"orchestra\":{\"columns\":\"*, Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format\"},\"performance\":{\"columns\":\"*, Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share\"},\"show\":{\"columns\":\"*, Show_ID, Performance_ID, If_first_show, Result, Attendance\"}},\"foreign_keys\":\"orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID\",\"primary_keys\":\"conductor.Conductor_ID,orchestra.Orchestra_ID,performance.Performance_ID\"}}"}
{"sql1": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC", "sql2": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) DESC", "semantic equivalence": false, "schema": "{\"orchestra\":{\"tables\":{\"conductor\":{\"columns\":\"*, Conductor_ID, Name, Age, Nationality, Year_of_Work\"},\"orchestra\":{\"columns\":\"*, Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format\"},\"performance\":{\"columns\":\"*, Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share\"},\"show\":{\"columns\":\"*, Show_ID, Performance_ID, If_first_show, Result, Attendance\"}},\"foreign_keys\":\"orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID\",\"primary_keys\":\"conductor.Conductor_ID,orchestra.Orchestra_ID,performance.Performance_ID\"}}"}
{"sql1": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "sql2": "SELECT H.name, COUNT(F.friend_id) FROM Highschooler H LEFT JOIN Friend F ON H.ID = F.student_id GROUP BY H.ID, H.name", "semantic equivalence": false, "schema": "{\"network_1\":{\"tables\":{\"Friend\":{\"columns\":\"*, student_id, friend_id\"},\"Highschooler\":{\"columns\":\"*, ID, name, grade\"},\"Likes\":{\"columns\":\"*, student_id, liked_id\"}},\"foreign_keys\":\"Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID\",\"primary_keys\":\"Highschooler.ID,Friend.student_id,Likes.student_id\"}}"}
{"sql1": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "sql2": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.name ORDER BY COUNT(*) DESC LIMIT 1", "semantic equivalence": false, "schema": "{\"network_1\":{\"tables\":{\"Friend\":{\"columns\":\"*, student_id, friend_id\"},\"Highschooler\":{\"columns\":\"*, ID, name, grade\"},\"Likes\":{\"columns\":\"*, student_id, liked_id\"}},\"foreign_keys\":\"Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID\",\"primary_keys\":\"Highschooler.ID,Friend.student_id,Likes.student_id\"}}"}
{"sql1": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "sql2": "SELECT T1.student_id FROM Friend AS T1 JOIN Likes AS T2 ON T1.student_id = T2.liked_id", "semantic equivalence": false, "schema": "{\"network_1\":{\"tables\":{\"Friend\":{\"columns\":\"*, student_id, friend_id\"},\"Highschooler\":{\"columns\":\"*, ID, name, grade\"},\"Likes\":{\"columns\":\"*, student_id, liked_id\"}},\"foreign_keys\":\"Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID\",\"primary_keys\":\"Highschooler.ID,Friend.student_id,Likes.student_id\"}}"}
{"sql1": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "sql2": "SELECT DISTINCT student_id FROM Friend WHERE student_id IN (SELECT student_id FROM Likes)", "semantic equivalence": false, "schema": "{\"network_1\":{\"tables\":{\"Friend\":{\"columns\":\"*, student_id, friend_id\"},\"Highschooler\":{\"columns\":\"*, ID, name, grade\"},\"Likes\":{\"columns\":\"*, student_id, liked_id\"}},\"foreign_keys\":\"Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID\",\"primary_keys\":\"Highschooler.ID,Friend.student_id,Likes.student_id\"}}"}
{"sql1": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "sql2": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id JOIN Likes AS T3 ON T1.ID = T3.liked_id", "semantic equivalence": false, "schema": "{\"network_1\":{\"tables\":{\"Friend\":{\"columns\":\"*, student_id, friend_id\"},\"Highschooler\":{\"columns\":\"*, ID, name, grade\"},\"Likes\":{\"columns\":\"*, student_id, liked_id\"}},\"foreign_keys\":\"Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID\",\"primary_keys\":\"Highschooler.ID,Friend.student_id,Likes.student_id\"}}"}
{"sql1": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "sql2": "SELECT T1.name, count(*) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.name", "semantic equivalence": false, "schema": "{\"network_1\":{\"tables\":{\"Friend\":{\"columns\":\"*, student_id, friend_id\"},\"Highschooler\":{\"columns\":\"*, ID, name, grade\"},\"Likes\":{\"columns\":\"*, student_id, liked_id\"}},\"foreign_keys\":\"Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID\",\"primary_keys\":\"Highschooler.ID,Friend.student_id,Likes.student_id\"}}"}
{"sql1": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "sql2": "SELECT H.name, COUNT(*) FROM Highschooler H JOIN Likes L ON H.ID = L.student_id GROUP BY H.name", "semantic equivalence": false, "schema": "{\"network_1\":{\"tables\":{\"Friend\":{\"columns\":\"*, student_id, friend_id\"},\"Highschooler\":{\"columns\":\"*, ID, name, grade\"},\"Likes\":{\"columns\":\"*, student_id, liked_id\"}},\"foreign_keys\":\"Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID\",\"primary_keys\":\"Highschooler.ID,Friend.student_id,Likes.student_id\"}}"}
{"sql1": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "sql2": "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T1.ID ORDER BY count(*) DESC LIMIT 1", "semantic equivalence": false, "schema": "{\"network_1\":{\"tables\":{\"Friend\":{\"columns\":\"*, student_id, friend_id\"},\"Highschooler\":{\"columns\":\"*, ID, name, grade\"},\"Likes\":{\"columns\":\"*, student_id, liked_id\"}},\"foreign_keys\":\"Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID\",\"primary_keys\":\"Highschooler.ID,Friend.student_id,Likes.student_id\"}}"}
{"sql1": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "sql2": "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T1.ID ORDER BY COUNT(*) DESC LIMIT 1", "semantic equivalence": false, "schema": "{\"network_1\":{\"tables\":{\"Friend\":{\"columns\":\"*, student_id, friend_id\"},\"Highschooler\":{\"columns\":\"*, ID, name, grade\"},\"Likes\":{\"columns\":\"*, student_id, liked_id\"}},\"foreign_keys\":\"Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID\",\"primary_keys\":\"Highschooler.ID,Friend.student_id,Likes.student_id\"}}"}
{"sql1": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )", "sql2": "SELECT T1.name FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY T1.dog_id HAVING sum(T2.cost_of_treatment) <= 1000", "semantic equivalence": false, "schema": "{\"dog_kennels\":{\"tables\":{\"Breeds\":{\"columns\":\"*, breed_code, breed_name\"},\"Charges\":{\"columns\":\"*, charge_id, charge_type, charge_amount\"},\"Dogs\":{\"columns\":\"*, dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed\"},\"Owners\":{\"columns\":\"*, owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number\"},\"Professionals\":{\"columns\":\"*, professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number\"},\"Sizes\":{\"columns\":\"*, size_code, size_description\"},\"Treatment_Types\":{\"columns\":\"*, treatment_type_code, treatment_type_description\"},\"Treatments\":{\"columns\":\"*, treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment\"}},\"foreign_keys\":\"Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code\",\"primary_keys\":\"Breeds.breed_code,Charges.charge_id,Sizes.size_code,Treatment_Types.treatment_type_code,Owners.owner_id,Dogs.dog_id,Professionals.professional_id,Treatments.treatment_id\"}}"}
{"sql1": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "sql2": "SELECT T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1", "semantic equivalence": false, "schema": "{\"dog_kennels\":{\"tables\":{\"Breeds\":{\"columns\":\"*, breed_code, breed_name\"},\"Charges\":{\"columns\":\"*, charge_id, charge_type, charge_amount\"},\"Dogs\":{\"columns\":\"*, dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed\"},\"Owners\":{\"columns\":\"*, owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number\"},\"Professionals\":{\"columns\":\"*, professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number\"},\"Sizes\":{\"columns\":\"*, size_code, size_description\"},\"Treatment_Types\":{\"columns\":\"*, treatment_type_code, treatment_type_description\"},\"Treatments\":{\"columns\":\"*, treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment\"}},\"foreign_keys\":\"Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code\",\"primary_keys\":\"Breeds.breed_code,Charges.charge_id,Sizes.size_code,Treatment_Types.treatment_type_code,Owners.owner_id,Dogs.dog_id,Professionals.professional_id,Treatments.treatment_id\"}}"}
{"sql1": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "sql2": "SELECT T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id, T1.last_name ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1", "semantic equivalence": false, "schema": "{\"dog_kennels\":{\"tables\":{\"Breeds\":{\"columns\":\"*, breed_code, breed_name\"},\"Charges\":{\"columns\":\"*, charge_id, charge_type, charge_amount\"},\"Dogs\":{\"columns\":\"*, dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed\"},\"Owners\":{\"columns\":\"*, owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number\"},\"Professionals\":{\"columns\":\"*, professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number\"},\"Sizes\":{\"columns\":\"*, size_code, size_description\"},\"Treatment_Types\":{\"columns\":\"*, treatment_type_code, treatment_type_description\"},\"Treatments\":{\"columns\":\"*, treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment\"}},\"foreign_keys\":\"Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code\",\"primary_keys\":\"Breeds.breed_code,Charges.charge_id,Sizes.size_code,Treatment_Types.treatment_type_code,Owners.owner_id,Dogs.dog_id,Professionals.professional_id,Treatments.treatment_id\"}}"}
{"sql1": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "sql2": "SELECT T1.professional_id , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING COUNT (DISTINCT T2.treatment_type_code) >= 2", "semantic equivalence": false, "schema": "{\"dog_kennels\":{\"tables\":{\"Breeds\":{\"columns\":\"*, breed_code, breed_name\"},\"Charges\":{\"columns\":\"*, charge_id, charge_type, charge_amount\"},\"Dogs\":{\"columns\":\"*, dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed\"},\"Owners\":{\"columns\":\"*, owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number\"},\"Professionals\":{\"columns\":\"*, professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number\"},\"Sizes\":{\"columns\":\"*, size_code, size_description\"},\"Treatment_Types\":{\"columns\":\"*, treatment_type_code, treatment_type_description\"},\"Treatments\":{\"columns\":\"*, treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment\"}},\"foreign_keys\":\"Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code\",\"primary_keys\":\"Breeds.breed_code,Charges.charge_id,Sizes.size_code,Treatment_Types.treatment_type_code,Owners.owner_id,Dogs.dog_id,Professionals.professional_id,Treatments.treatment_id\"}}"}
{"sql1": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "sql2": "SELECT professional_id, cell_number FROM Professionals WHERE professional_id IN ( SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2 )", "semantic equivalence": false, "schema": "{\"dog_kennels\":{\"tables\":{\"Breeds\":{\"columns\":\"*, breed_code, breed_name\"},\"Charges\":{\"columns\":\"*, charge_id, charge_type, charge_amount\"},\"Dogs\":{\"columns\":\"*, dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed\"},\"Owners\":{\"columns\":\"*, owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number\"},\"Professionals\":{\"columns\":\"*, professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number\"},\"Sizes\":{\"columns\":\"*, size_code, size_description\"},\"Treatment_Types\":{\"columns\":\"*, treatment_type_code, treatment_type_description\"},\"Treatments\":{\"columns\":\"*, treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment\"}},\"foreign_keys\":\"Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code\",\"primary_keys\":\"Breeds.breed_code,Charges.charge_id,Sizes.size_code,Treatment_Types.treatment_type_code,Owners.owner_id,Dogs.dog_id,Professionals.professional_id,Treatments.treatment_id\"}}"}
{"sql1": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "sql2": "SELECT first_name, last_name FROM Professionals WHERE professional_id IN ( SELECT professional_id FROM Treatments WHERE cost_of_treatment < ( SELECT AVG(cost_of_treatment) FROM Treatments ) )", "semantic equivalence": false, "schema": "{\"dog_kennels\":{\"tables\":{\"Breeds\":{\"columns\":\"*, breed_code, breed_name\"},\"Charges\":{\"columns\":\"*, charge_id, charge_type, charge_amount\"},\"Dogs\":{\"columns\":\"*, dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed\"},\"Owners\":{\"columns\":\"*, owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number\"},\"Professionals\":{\"columns\":\"*, professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number\"},\"Sizes\":{\"columns\":\"*, size_code, size_description\"},\"Treatment_Types\":{\"columns\":\"*, treatment_type_code, treatment_type_description\"},\"Treatments\":{\"columns\":\"*, treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment\"}},\"foreign_keys\":\"Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code\",\"primary_keys\":\"Breeds.breed_code,Charges.charge_id,Sizes.size_code,Treatment_Types.treatment_type_code,Owners.owner_id,Dogs.dog_id,Professionals.professional_id,Treatments.treatment_id\"}}"}
{"sql1": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "sql2": "SELECT P.first_name, P.last_name FROM Professionals AS P JOIN Treatments AS T ON P.professional_id = T.professional_id WHERE T.cost_of_treatment < (SELECT avg(cost_of_treatment) FROM Treatments)", "semantic equivalence": false, "schema": "{\"dog_kennels\":{\"tables\":{\"Breeds\":{\"columns\":\"*, breed_code, breed_name\"},\"Charges\":{\"columns\":\"*, charge_id, charge_type, charge_amount\"},\"Dogs\":{\"columns\":\"*, dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed\"},\"Owners\":{\"columns\":\"*, owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number\"},\"Professionals\":{\"columns\":\"*, professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number\"},\"Sizes\":{\"columns\":\"*, size_code, size_description\"},\"Treatment_Types\":{\"columns\":\"*, treatment_type_code, treatment_type_description\"},\"Treatments\":{\"columns\":\"*, treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment\"}},\"foreign_keys\":\"Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code\",\"primary_keys\":\"Breeds.breed_code,Charges.charge_id,Sizes.size_code,Treatment_Types.treatment_type_code,Owners.owner_id,Dogs.dog_id,Professionals.professional_id,Treatments.treatment_id\"}}"}
{"sql1": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "sql2": "SELECT T1.first_name , T1.last_name , T3.size_description FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Sizes AS T3 ON T2.size_code = T3.size_code", "semantic equivalence": false, "schema": "{\"dog_kennels\":{\"tables\":{\"Breeds\":{\"columns\":\"*, breed_code, breed_name\"},\"Charges\":{\"columns\":\"*, charge_id, charge_type, charge_amount\"},\"Dogs\":{\"columns\":\"*, dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed\"},\"Owners\":{\"columns\":\"*, owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number\"},\"Professionals\":{\"columns\":\"*, professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number\"},\"Sizes\":{\"columns\":\"*, size_code, size_description\"},\"Treatment_Types\":{\"columns\":\"*, treatment_type_code, treatment_type_description\"},\"Treatments\":{\"columns\":\"*, treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment\"}},\"foreign_keys\":\"Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code\",\"primary_keys\":\"Breeds.breed_code,Charges.charge_id,Sizes.size_code,Treatment_Types.treatment_type_code,Owners.owner_id,Dogs.dog_id,Professionals.professional_id,Treatments.treatment_id\"}}"}
{"sql1": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "sql2": "SELECT T1.first_name, T1.last_name, T3.size_description FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Sizes AS T3 ON T2.size_code = T3.size_code", "semantic equivalence": false, "schema": "{\"dog_kennels\":{\"tables\":{\"Breeds\":{\"columns\":\"*, breed_code, breed_name\"},\"Charges\":{\"columns\":\"*, charge_id, charge_type, charge_amount\"},\"Dogs\":{\"columns\":\"*, dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed\"},\"Owners\":{\"columns\":\"*, owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number\"},\"Professionals\":{\"columns\":\"*, professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number\"},\"Sizes\":{\"columns\":\"*, size_code, size_description\"},\"Treatment_Types\":{\"columns\":\"*, treatment_type_code, treatment_type_description\"},\"Treatments\":{\"columns\":\"*, treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment\"}},\"foreign_keys\":\"Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code\",\"primary_keys\":\"Breeds.breed_code,Charges.charge_id,Sizes.size_code,Treatment_Types.treatment_type_code,Owners.owner_id,Dogs.dog_id,Professionals.professional_id,Treatments.treatment_id\"}}"}
{"sql1": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "sql2": "SELECT T1.date_arrived, T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id", "semantic equivalence": false, "schema": "{\"dog_kennels\":{\"tables\":{\"Breeds\":{\"columns\":\"*, breed_code, breed_name\"},\"Charges\":{\"columns\":\"*, charge_id, charge_type, charge_amount\"},\"Dogs\":{\"columns\":\"*, dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed\"},\"Owners\":{\"columns\":\"*, owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number\"},\"Professionals\":{\"columns\":\"*, professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number\"},\"Sizes\":{\"columns\":\"*, size_code, size_description\"},\"Treatment_Types\":{\"columns\":\"*, treatment_type_code, treatment_type_description\"},\"Treatments\":{\"columns\":\"*, treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment\"}},\"foreign_keys\":\"Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code\",\"primary_keys\":\"Breeds.breed_code,Charges.charge_id,Sizes.size_code,Treatment_Types.treatment_type_code,Owners.owner_id,Dogs.dog_id,Professionals.professional_id,Treatments.treatment_id\"}}"}
{"sql1": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "sql2": "SELECT T1.date_arrived , T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id", "semantic equivalence": false, "schema": "{\"dog_kennels\":{\"tables\":{\"Breeds\":{\"columns\":\"*, breed_code, breed_name\"},\"Charges\":{\"columns\":\"*, charge_id, charge_type, charge_amount\"},\"Dogs\":{\"columns\":\"*, dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed\"},\"Owners\":{\"columns\":\"*, owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number\"},\"Professionals\":{\"columns\":\"*, professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number\"},\"Sizes\":{\"columns\":\"*, size_code, size_description\"},\"Treatment_Types\":{\"columns\":\"*, treatment_type_code, treatment_type_description\"},\"Treatments\":{\"columns\":\"*, treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment\"}},\"foreign_keys\":\"Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code\",\"primary_keys\":\"Breeds.breed_code,Charges.charge_id,Sizes.size_code,Treatment_Types.treatment_type_code,Owners.owner_id,Dogs.dog_id,Professionals.professional_id,Treatments.treatment_id\"}}"}
{"sql1": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "sql2": "SELECT Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id ORDER BY Dogs.date_of_birth DESC LIMIT 1;", "semantic equivalence": false, "schema": "{\"dog_kennels\":{\"tables\":{\"Breeds\":{\"columns\":\"*, breed_code, breed_name\"},\"Charges\":{\"columns\":\"*, charge_id, charge_type, charge_amount\"},\"Dogs\":{\"columns\":\"*, dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed\"},\"Owners\":{\"columns\":\"*, owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number\"},\"Professionals\":{\"columns\":\"*, professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number\"},\"Sizes\":{\"columns\":\"*, size_code, size_description\"},\"Treatment_Types\":{\"columns\":\"*, treatment_type_code, treatment_type_description\"},\"Treatments\":{\"columns\":\"*, treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment\"}},\"foreign_keys\":\"Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code\",\"primary_keys\":\"Breeds.breed_code,Charges.charge_id,Sizes.size_code,Treatment_Types.treatment_type_code,Owners.owner_id,Dogs.dog_id,Professionals.professional_id,Treatments.treatment_id\"}}"}
{"sql1": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "sql2": "SELECT Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id ORDER BY Dogs.date_of_birth DESC LIMIT 1;", "semantic equivalence": false, "schema": "{\"dog_kennels\":{\"tables\":{\"Breeds\":{\"columns\":\"*, breed_code, breed_name\"},\"Charges\":{\"columns\":\"*, charge_id, charge_type, charge_amount\"},\"Dogs\":{\"columns\":\"*, dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed\"},\"Owners\":{\"columns\":\"*, owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number\"},\"Professionals\":{\"columns\":\"*, professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number\"},\"Sizes\":{\"columns\":\"*, size_code, size_description\"},\"Treatment_Types\":{\"columns\":\"*, treatment_type_code, treatment_type_description\"},\"Treatments\":{\"columns\":\"*, treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment\"}},\"foreign_keys\":\"Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code\",\"primary_keys\":\"Breeds.breed_code,Charges.charge_id,Sizes.size_code,Treatment_Types.treatment_type_code,Owners.owner_id,Dogs.dog_id,Professionals.professional_id,Treatments.treatment_id\"}}"}
{"sql1": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )", "sql2": "SELECT count(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE date_adopted IS NULL AND date_departed IS NULL)", "semantic equivalence": false, "schema": "{\"dog_kennels\":{\"tables\":{\"Breeds\":{\"columns\":\"*, breed_code, breed_name\"},\"Charges\":{\"columns\":\"*, charge_id, charge_type, charge_amount\"},\"Dogs\":{\"columns\":\"*, dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed\"},\"Owners\":{\"columns\":\"*, owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number\"},\"Professionals\":{\"columns\":\"*, professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number\"},\"Sizes\":{\"columns\":\"*, size_code, size_description\"},\"Treatment_Types\":{\"columns\":\"*, treatment_type_code, treatment_type_description\"},\"Treatments\":{\"columns\":\"*, treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment\"}},\"foreign_keys\":\"Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code\",\"primary_keys\":\"Breeds.breed_code,Charges.charge_id,Sizes.size_code,Treatment_Types.treatment_type_code,Owners.owner_id,Dogs.dog_id,Professionals.professional_id,Treatments.treatment_id\"}}"}
{"sql1": "SELECT max(charge_amount) FROM Charges", "sql2": "SELECT charge_type FROM Charges ORDER BY charge_amount DESC LIMIT 1", "semantic equivalence": false, "schema": "{\"dog_kennels\":{\"tables\":{\"Breeds\":{\"columns\":\"*, breed_code, breed_name\"},\"Charges\":{\"columns\":\"*, charge_id, charge_type, charge_amount\"},\"Dogs\":{\"columns\":\"*, dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed\"},\"Owners\":{\"columns\":\"*, owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number\"},\"Professionals\":{\"columns\":\"*, professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number\"},\"Sizes\":{\"columns\":\"*, size_code, size_description\"},\"Treatment_Types\":{\"columns\":\"*, treatment_type_code, treatment_type_description\"},\"Treatments\":{\"columns\":\"*, treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment\"}},\"foreign_keys\":\"Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code\",\"primary_keys\":\"Breeds.breed_code,Charges.charge_id,Sizes.size_code,Treatment_Types.treatment_type_code,Owners.owner_id,Dogs.dog_id,Professionals.professional_id,Treatments.treatment_id\"}}"}
{"sql1": "SELECT max(charge_amount) FROM Charges", "sql2": "SELECT charge_type, charge_amount FROM Charges ORDER BY charge_amount DESC LIMIT 1", "semantic equivalence": false, "schema": "{\"dog_kennels\":{\"tables\":{\"Breeds\":{\"columns\":\"*, breed_code, breed_name\"},\"Charges\":{\"columns\":\"*, charge_id, charge_type, charge_amount\"},\"Dogs\":{\"columns\":\"*, dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed\"},\"Owners\":{\"columns\":\"*, owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number\"},\"Professionals\":{\"columns\":\"*, professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number\"},\"Sizes\":{\"columns\":\"*, size_code, size_description\"},\"Treatment_Types\":{\"columns\":\"*, treatment_type_code, treatment_type_description\"},\"Treatments\":{\"columns\":\"*, treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment\"}},\"foreign_keys\":\"Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code\",\"primary_keys\":\"Breeds.breed_code,Charges.charge_id,Sizes.size_code,Treatment_Types.treatment_type_code,Owners.owner_id,Dogs.dog_id,Professionals.professional_id,Treatments.treatment_id\"}}"}
{"sql1": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "sql2": "SELECT B.breed_name, S.size_description FROM Breeds B CROSS JOIN Sizes S", "semantic equivalence": false, "schema": "{\"dog_kennels\":{\"tables\":{\"Breeds\":{\"columns\":\"*, breed_code, breed_name\"},\"Charges\":{\"columns\":\"*, charge_id, charge_type, charge_amount\"},\"Dogs\":{\"columns\":\"*, dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed\"},\"Owners\":{\"columns\":\"*, owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number\"},\"Professionals\":{\"columns\":\"*, professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number\"},\"Sizes\":{\"columns\":\"*, size_code, size_description\"},\"Treatment_Types\":{\"columns\":\"*, treatment_type_code, treatment_type_description\"},\"Treatments\":{\"columns\":\"*, treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment\"}},\"foreign_keys\":\"Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code\",\"primary_keys\":\"Breeds.breed_code,Charges.charge_id,Sizes.size_code,Treatment_Types.treatment_type_code,Owners.owner_id,Dogs.dog_id,Professionals.professional_id,Treatments.treatment_id\"}}"}
{"sql1": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "sql2": "SELECT DISTINCT T1.breed_name, T2.size_description FROM Breeds AS T1 JOIN Dogs AS T3 ON T1.breed_code = T3.breed_code JOIN Sizes AS T2 ON T3.size_code = T2.size_code", "semantic equivalence": false, "schema": "{\"dog_kennels\":{\"tables\":{\"Breeds\":{\"columns\":\"*, breed_code, breed_name\"},\"Charges\":{\"columns\":\"*, charge_id, charge_type, charge_amount\"},\"Dogs\":{\"columns\":\"*, dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed\"},\"Owners\":{\"columns\":\"*, owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number\"},\"Professionals\":{\"columns\":\"*, professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number\"},\"Sizes\":{\"columns\":\"*, size_code, size_description\"},\"Treatment_Types\":{\"columns\":\"*, treatment_type_code, treatment_type_description\"},\"Treatments\":{\"columns\":\"*, treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment\"}},\"foreign_keys\":\"Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code\",\"primary_keys\":\"Breeds.breed_code,Charges.charge_id,Sizes.size_code,Treatment_Types.treatment_type_code,Owners.owner_id,Dogs.dog_id,Professionals.professional_id,Treatments.treatment_id\"}}"}
{"sql1": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "sql2": "SELECT T2.first_name , T3.treatment_type_description FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_Types AS T3 ON T1.treatment_type_code = T3.treatment_type_code", "semantic equivalence": false, "schema": "{\"dog_kennels\":{\"tables\":{\"Breeds\":{\"columns\":\"*, breed_code, breed_name\"},\"Charges\":{\"columns\":\"*, charge_id, charge_type, charge_amount\"},\"Dogs\":{\"columns\":\"*, dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed\"},\"Owners\":{\"columns\":\"*, owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number\"},\"Professionals\":{\"columns\":\"*, professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number\"},\"Sizes\":{\"columns\":\"*, size_code, size_description\"},\"Treatment_Types\":{\"columns\":\"*, treatment_type_code, treatment_type_description\"},\"Treatments\":{\"columns\":\"*, treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment\"}},\"foreign_keys\":\"Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code\",\"primary_keys\":\"Breeds.breed_code,Charges.charge_id,Sizes.size_code,Treatment_Types.treatment_type_code,Owners.owner_id,Dogs.dog_id,Professionals.professional_id,Treatments.treatment_id\"}}"}
{"sql1": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "sql2": "SELECT T2.first_name, T3.treatment_type_description FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_Types AS T3 ON T1.treatment_type_code = T3.treatment_type_code", "semantic equivalence": false, "schema": "{\"dog_kennels\":{\"tables\":{\"Breeds\":{\"columns\":\"*, breed_code, breed_name\"},\"Charges\":{\"columns\":\"*, charge_id, charge_type, charge_amount\"},\"Dogs\":{\"columns\":\"*, dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed\"},\"Owners\":{\"columns\":\"*, owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number\"},\"Professionals\":{\"columns\":\"*, professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number\"},\"Sizes\":{\"columns\":\"*, size_code, size_description\"},\"Treatment_Types\":{\"columns\":\"*, treatment_type_code, treatment_type_description\"},\"Treatments\":{\"columns\":\"*, treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment\"}},\"foreign_keys\":\"Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code\",\"primary_keys\":\"Breeds.breed_code,Charges.charge_id,Sizes.size_code,Treatment_Types.treatment_type_code,Owners.owner_id,Dogs.dog_id,Professionals.professional_id,Treatments.treatment_id\"}}"}
{"sql1": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "sql2": "SELECT Name FROM singer WHERE Citizenship != 'French'", "semantic equivalence": false, "schema": "{\"singer\":{\"tables\":{\"singer\":{\"columns\":\"*, Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship\"},\"song\":{\"columns\":\"*, Song_ID, Title, Singer_ID, Sales, Highest_Position\"}},\"foreign_keys\":\"song.Singer_ID = singer.Singer_ID\",\"primary_keys\":\"singer.Singer_ID,song.Song_ID\"}}"}
{"sql1": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code", "sql2": "SELECT property_type_description FROM Ref_Property_Types RPT, Properties P WHERE RPT.property_type_code = P.property_type_code", "semantic equivalence": false, "schema": "{\"real_estate_properties\":{\"tables\":{\"Other_Available_Features\":{\"columns\":\"*, feature_id, feature_type_code, feature_name, feature_description\"},\"Other_Property_Features\":{\"columns\":\"*, property_id, feature_id, property_feature_description\"},\"Properties\":{\"columns\":\"*, property_id, property_type_code, date_on_market, date_sold, property_name, property_address, room_count, vendor_requested_price, buyer_offered_price, agreed_selling_price, apt_feature_1, apt_feature_2, apt_feature_3, fld_feature_1, fld_feature_2, fld_feature_3, hse_feature_1, hse_feature_2, hse_feature_3, oth_feature_1, oth_feature_2, oth_feature_3, shp_feature_1, shp_feature_2, shp_feature_3, other_property_details\"},\"Ref_Feature_Types\":{\"columns\":\"*, feature_type_code, feature_type_name\"},\"Ref_Property_Types\":{\"columns\":\"*, property_type_code, property_type_description\"}},\"foreign_keys\":\"Other_Available_Features.feature_type_code = Ref_Feature_Types.feature_type_code,Properties.property_type_code = Ref_Property_Types.property_type_code,Other_Property_Features.property_id = Properties.property_id,Other_Property_Features.feature_id = Other_Available_Features.feature_id\",\"primary_keys\":\"Ref_Feature_Types.feature_type_code,Ref_Property_Types.property_type_code,Other_Available_Features.feature_id,Properties.property_id\"}}"}
{"sql1": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1", "sql2": "SELECT property_name FROM Properties WHERE property_type_code IN (SELECT property_type_code FROM Ref_Property_Types WHERE property_type_description IN ('House','Apartment')) AND room_count > 1", "semantic equivalence": false, "schema": "{\"real_estate_properties\":{\"tables\":{\"Other_Available_Features\":{\"columns\":\"*, feature_id, feature_type_code, feature_name, feature_description\"},\"Other_Property_Features\":{\"columns\":\"*, property_id, feature_id, property_feature_description\"},\"Properties\":{\"columns\":\"*, property_id, property_type_code, date_on_market, date_sold, property_name, property_address, room_count, vendor_requested_price, buyer_offered_price, agreed_selling_price, apt_feature_1, apt_feature_2, apt_feature_3, fld_feature_1, fld_feature_2, fld_feature_3, hse_feature_1, hse_feature_2, hse_feature_3, oth_feature_1, oth_feature_2, oth_feature_3, shp_feature_1, shp_feature_2, shp_feature_3, other_property_details\"},\"Ref_Feature_Types\":{\"columns\":\"*, feature_type_code, feature_type_name\"},\"Ref_Property_Types\":{\"columns\":\"*, property_type_code, property_type_description\"}},\"foreign_keys\":\"Other_Available_Features.feature_type_code = Ref_Feature_Types.feature_type_code,Properties.property_type_code = Ref_Property_Types.property_type_code,Other_Property_Features.property_id = Properties.property_id,Other_Property_Features.feature_id = Other_Available_Features.feature_id\",\"primary_keys\":\"Ref_Feature_Types.feature_type_code,Ref_Property_Types.property_type_code,Other_Available_Features.feature_id,Properties.property_id\"}}"}