{"gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "pred_sql": "SELECT COUNT(*) FROM flights WHERE Airline=\"JetBlue Airways\"", "hardness": "medium", "database": "flight_2", "execution_match": false, "human_preference": "equivalent", "schema": "{\"flight_2\":{\"tables\":{\"airlines\":{\"columns\":\"*, uid, Airline, Abbreviation, Country\"},\"airports\":{\"columns\":\"*, City, AirportCode, AirportName, Country, CountryAbbrev\"},\"flights\":{\"columns\":\"*, Airline, FlightNo, SourceAirport, DestAirport\"}},\"foreign_keys\":\"flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode\",\"primary_keys\":\"airlines.uid,airports.AirportCode,flights.Airline\"}}"}
{"gold_sql": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000", "pred_sql": "SELECT AVG(SurfaceArea), SUM(Population)  FROM country  WHERE Continent = 'North America' AND SurfaceArea > 3000;", "hardness": "hard", "database": "world_1", "execution_match": false, "human_preference": "equivalent", "schema": "{\"world_1\":{\"tables\":{\"city\":{\"columns\":\"*, ID, Name, CountryCode, District, Population\"},\"country\":{\"columns\":\"*, Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2\"},\"countrylanguage\":{\"columns\":\"*, CountryCode, Language, IsOfficial, Percentage\"},\"sqlite_sequence\":{\"columns\":\"*, name, seq\"}},\"foreign_keys\":\"city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code\",\"primary_keys\":\"city.ID,country.Code,countrylanguage.CountryCode\"}}"}
{"gold_sql": "SELECT count(*) FROM CONTINENTS;", "pred_sql": "SELECT COUNT(Continent) FROM continents", "hardness": "easy", "database": "car_1", "execution_match": true, "human_preference": "equivalent", "schema": "{\"car_1\":{\"tables\":{\"car_makers\":{\"columns\":\"*, Id, Maker, FullName, Country\"},\"car_names\":{\"columns\":\"*, MakeId, Model, Make\"},\"cars_data\":{\"columns\":\"*, Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year\"},\"continents\":{\"columns\":\"*, ContId, Continent\"},\"countries\":{\"columns\":\"*, CountryId, CountryName, Continent\"},\"model_list\":{\"columns\":\"*, ModelId, Maker, Model\"}},\"foreign_keys\":\"countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId\",\"primary_keys\":\"continents.ContId,countries.CountryId,car_makers.Id,model_list.ModelId,car_names.MakeId,cars_data.Id\"}}"}
{"gold_sql": "select name from teacher where hometown != \"little lever urban district\"", "pred_sql": "SELECT Name FROM teacher WHERE Hometown <> 'Little Lever Urban District';", "hardness": "easy", "database": "course_teach", "execution_match": false, "human_preference": "equivalent", "schema": "{\"course_teach\":{\"tables\":{\"course\":{\"columns\":\"*, Course_ID, Staring_Date, Course\"},\"course_arrange\":{\"columns\":\"*, Course_ID, Teacher_ID, Grade\"},\"teacher\":{\"columns\":\"*, Teacher_ID, Name, Age, Hometown\"}},\"foreign_keys\":\"course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID\",\"primary_keys\":\"course.Course_ID,teacher.Teacher_ID,course_arrange.Course_ID\"}}"}
{"gold_sql": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "pred_sql": "SELECT City, Country FROM airports WHERE AirportCode = 'Alton';", "hardness": "medium", "database": "flight_2", "execution_match": true, "human_preference": "inequivalent", "schema": "{\"flight_2\":{\"tables\":{\"airlines\":{\"columns\":\"*, uid, Airline, Abbreviation, Country\"},\"airports\":{\"columns\":\"*, City, AirportCode, AirportName, Country, CountryAbbrev\"},\"flights\":{\"columns\":\"*, Airline, FlightNo, SourceAirport, DestAirport\"}},\"foreign_keys\":\"flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode\",\"primary_keys\":\"airlines.uid,airports.AirportCode,flights.Airline\"}}"}
{"gold_sql": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "pred_sql": "SELECT AVG(GNP), SUM(Population)  FROM country  WHERE GovernmentForm = 'US territory'", "hardness": "medium", "database": "world_1", "execution_match": false, "human_preference": "equivalent", "schema": "{\"world_1\":{\"tables\":{\"city\":{\"columns\":\"*, ID, Name, CountryCode, District, Population\"},\"country\":{\"columns\":\"*, Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2\"},\"countrylanguage\":{\"columns\":\"*, CountryCode, Language, IsOfficial, Percentage\"},\"sqlite_sequence\":{\"columns\":\"*, name, seq\"}},\"foreign_keys\":\"city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code\",\"primary_keys\":\"city.ID,country.Code,countrylanguage.CountryCode\"}}"}
{"gold_sql": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "pred_sql": "SELECT Cartoon.Production_code, Cartoon.Channel  FROM Cartoon  WHERE Cartoon.Original_air_date = (SELECT MAX(Cartoon.Original_air_date) FROM Cartoon)", "hardness": "medium", "database": "tvshow", "execution_match": true, "human_preference": "equivalent", "schema": "{\"tvshow\":{\"tables\":{\"Cartoon\":{\"columns\":\"*, id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel\"},\"TV_Channel\":{\"columns\":\"*, id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option\"},\"TV_series\":{\"columns\":\"*, id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel\"}},\"foreign_keys\":\"TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id\",\"primary_keys\":\"TV_Channel.id,TV_series.id,Cartoon.id\"}}"}
{"gold_sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "pred_sql": "SELECT Money_Rank  FROM poker_player  WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player)", "hardness": "medium", "database": "poker_player", "execution_match": true, "human_preference": "equivalent", "schema": "{\"poker_player\":{\"tables\":{\"people\":{\"columns\":\"*, People_ID, Nationality, Name, Birth_Date, Height\"},\"poker_player\":{\"columns\":\"*, Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings\"}},\"foreign_keys\":\"poker_player.People_ID = people.People_ID\",\"primary_keys\":\"poker_player.Poker_Player_ID,people.People_ID\"}}"}
{"gold_sql": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1", "pred_sql": "SELECT singer.Name  FROM singer  JOIN song  ON singer.Singer_ID = song.Singer_ID  GROUP BY singer.Singer_ID  HAVING COUNT(song.Song_ID) > 1", "hardness": "medium", "database": "singer", "execution_match": true, "human_preference": "equivalent", "schema": "{\"singer\":{\"tables\":{\"singer\":{\"columns\":\"*, Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship\"},\"song\":{\"columns\":\"*, Song_ID, Title, Singer_ID, Sales, Highest_Position\"}},\"foreign_keys\":\"song.Singer_ID = singer.Singer_ID\",\"primary_keys\":\"singer.Singer_ID,song.Song_ID\"}}"}
{"gold_sql": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );", "pred_sql": "SELECT COUNT(DISTINCT battle.id) FROM battle LEFT JOIN (     SELECT DISTINCT lost_in_battle     FROM ship     WHERE tonnage = 225 ) AS lost_ships ON battle.id = lost_ships.lost_in_battle WHERE lost_ships.lost_in_battle IS NULL AND result <> 'defeat'", "hardness": "extra", "database": "battle_death", "execution_match": true, "human_preference": "inequivalent", "schema": "{\"battle_death\":{\"tables\":{\"battle\":{\"columns\":\"*, id, name, date, bulgarian_commander, latin_commander, result\"},\"death\":{\"columns\":\"*, caused_by_ship_id, id, note, killed, injured\"},\"ship\":{\"columns\":\"*, lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship\"}},\"foreign_keys\":\"ship.lost_in_battle = battle.id,death.caused_by_ship_id = ship.id\",\"primary_keys\":\"battle.id,ship.id,death.id\"}}"}
{"gold_sql": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs", "pred_sql": "SELECT first_name FROM Owners  WHERE first_name NOT IN  (SELECT first_name FROM Dogs) UNION  SELECT first_name FROM Professionals  WHERE first_name NOT IN  (SELECT first_name FROM Dogs)", "hardness": "hard", "database": "dog_kennels", "execution_match": false, "human_preference": "equivalent", "schema": "{\"dog_kennels\":{\"tables\":{\"Breeds\":{\"columns\":\"*, breed_code, breed_name\"},\"Charges\":{\"columns\":\"*, charge_id, charge_type, charge_amount\"},\"Dogs\":{\"columns\":\"*, dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed\"},\"Owners\":{\"columns\":\"*, owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number\"},\"Professionals\":{\"columns\":\"*, professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number\"},\"Sizes\":{\"columns\":\"*, size_code, size_description\"},\"Treatment_Types\":{\"columns\":\"*, treatment_type_code, treatment_type_description\"},\"Treatments\":{\"columns\":\"*, treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment\"}},\"foreign_keys\":\"Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code\",\"primary_keys\":\"Breeds.breed_code,Charges.charge_id,Sizes.size_code,Treatment_Types.treatment_type_code,Owners.owner_id,Dogs.dog_id,Professionals.professional_id,Treatments.treatment_id\"}}"}
{"gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT Airline, COUNT(*) AS num_flights FROM flights GROUP BY Airline ORDER BY num_flights DESC LIMIT 1;", "hardness": "extra", "database": "flight_2", "execution_match": false, "human_preference": "equivalent", "schema": "{\"flight_2\":{\"tables\":{\"airlines\":{\"columns\":\"*, uid, Airline, Abbreviation, Country\"},\"airports\":{\"columns\":\"*, City, AirportCode, AirportName, Country, CountryAbbrev\"},\"flights\":{\"columns\":\"*, Airline, FlightNo, SourceAirport, DestAirport\"}},\"foreign_keys\":\"flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode\",\"primary_keys\":\"airlines.uid,airports.AirportCode,flights.Airline\"}}"}
{"gold_sql": "SELECT Maker ,  Model FROM MODEL_LIST;", "pred_sql": "SELECT car_makers.Maker, model_list.Model FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker", "hardness": "medium", "database": "car_1", "execution_match": false, "human_preference": "inequivalent", "schema": "{\"car_1\":{\"tables\":{\"car_makers\":{\"columns\":\"*, Id, Maker, FullName, Country\"},\"car_names\":{\"columns\":\"*, MakeId, Model, Make\"},\"cars_data\":{\"columns\":\"*, Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year\"},\"continents\":{\"columns\":\"*, ContId, Continent\"},\"countries\":{\"columns\":\"*, CountryId, CountryName, Continent\"},\"model_list\":{\"columns\":\"*, ModelId, Maker, Model\"}},\"foreign_keys\":\"countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId\",\"primary_keys\":\"continents.ContId,countries.CountryId,car_makers.Id,model_list.ModelId,car_names.MakeId,cars_data.Id\"}}"}
{"gold_sql": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id", "pred_sql": "SELECT Students.last_name  FROM Students  WHERE Students.state_province_county = 'North Carolina'  AND NOT EXISTS  (SELECT 1 FROM Student_Enrolment WHERE Student_Enrolment.student_id = Students.student_id)", "hardness": "extra", "database": "student_transcripts_tracking", "execution_match": false, "human_preference": "equivalent", "schema": "{\"student_transcripts_tracking\":{\"tables\":{\"Addresses\":{\"columns\":\"*, address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details\"},\"Courses\":{\"columns\":\"*, course_id, course_name, course_description, other_details\"},\"Degree_Programs\":{\"columns\":\"*, degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details\"},\"Departments\":{\"columns\":\"*, department_id, department_name, department_description, other_details\"},\"Sections\":{\"columns\":\"*, section_id, course_id, section_name, section_description, other_details\"},\"Semesters\":{\"columns\":\"*, semester_id, semester_name, semester_description, other_details\"},\"Student_Enrolment\":{\"columns\":\"*, student_enrolment_id, degree_program_id, semester_id, student_id, other_details\"},\"Student_Enrolment_Courses\":{\"columns\":\"*, student_course_id, course_id, student_enrolment_id\"},\"Students\":{\"columns\":\"*, student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details\"},\"Transcript_Contents\":{\"columns\":\"*, student_course_id, transcript_id\"},\"Transcripts\":{\"columns\":\"*, transcript_id, transcript_date, other_details\"}},\"foreign_keys\":\"Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\",\"primary_keys\":\"Addresses.address_id,Courses.course_id,Departments.department_id,Degree_Programs.degree_program_id,Sections.section_id,Semesters.semester_id,Students.student_id,Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.student_course_id,Transcripts.transcript_id\"}}"}
{"gold_sql": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "pred_sql": "SELECT MIN(weight)  FROM Pets  WHERE PetType = 'dog' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog')", "hardness": "medium", "database": "pets_1", "execution_match": true, "human_preference": "inequivalent", "schema": "{\"pets_1\":{\"tables\":{\"Has_Pet\":{\"columns\":\"*, StuID, PetID\"},\"Pets\":{\"columns\":\"*, PetID, PetType, pet_age, weight\"},\"Student\":{\"columns\":\"*, StuID, LName, Fname, Age, Sex, Major, Advisor, city_code\"}},\"foreign_keys\":\"Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID\",\"primary_keys\":\"Student.StuID,Pets.PetID\"}}"}
{"gold_sql": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "pred_sql": "SELECT Dogs.date_arrived, Dogs.date_departed  FROM Dogs  INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id", "hardness": "medium", "database": "dog_kennels", "execution_match": false, "human_preference": "equivalent", "schema": "{\"dog_kennels\":{\"tables\":{\"Breeds\":{\"columns\":\"*, breed_code, breed_name\"},\"Charges\":{\"columns\":\"*, charge_id, charge_type, charge_amount\"},\"Dogs\":{\"columns\":\"*, dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed\"},\"Owners\":{\"columns\":\"*, owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number\"},\"Professionals\":{\"columns\":\"*, professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number\"},\"Sizes\":{\"columns\":\"*, size_code, size_description\"},\"Treatment_Types\":{\"columns\":\"*, treatment_type_code, treatment_type_description\"},\"Treatments\":{\"columns\":\"*, treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment\"}},\"foreign_keys\":\"Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code\",\"primary_keys\":\"Breeds.breed_code,Charges.charge_id,Sizes.size_code,Treatment_Types.treatment_type_code,Owners.owner_id,Dogs.dog_id,Professionals.professional_id,Treatments.treatment_id\"}}"}
{"gold_sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "pred_sql": "SELECT first_name, last_name FROM players ORDER BY birth_date ASC;", "hardness": "medium", "database": "wta_1", "execution_match": false, "human_preference": "equivalent", "schema": "{\"wta_1\":{\"tables\":{\"matches\":{\"columns\":\"*, best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year\"},\"players\":{\"columns\":\"*, player_id, first_name, last_name, hand, birth_date, country_code\"},\"rankings\":{\"columns\":\"*, ranking_date, ranking, player_id, ranking_points, tours\"}},\"foreign_keys\":\"matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id\",\"primary_keys\":\"players.player_id\"}}"}
{"gold_sql": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10", "pred_sql": "SELECT battle.id, battle.name  FROM    battle    JOIN      (SELECT         caused_by_ship_id,         SUM(killed) AS total_killed       FROM         death       GROUP BY         caused_by_ship_id       HAVING         total_killed > 10)      AS deaths      ON battle.id = deaths.caused_by_ship_id;", "hardness": "hard", "database": "battle_death", "execution_match": false, "human_preference": "inequivalent", "schema": "{\"battle_death\":{\"tables\":{\"battle\":{\"columns\":\"*, id, name, date, bulgarian_commander, latin_commander, result\"},\"death\":{\"columns\":\"*, caused_by_ship_id, id, note, killed, injured\"},\"ship\":{\"columns\":\"*, lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship\"}},\"foreign_keys\":\"ship.lost_in_battle = battle.id,death.caused_by_ship_id = ship.id\",\"primary_keys\":\"battle.id,ship.id,death.id\"}}"}
{"gold_sql": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "pred_sql": "SELECT AVG(GNP), SUM(Population)  FROM country  WHERE GovernmentForm = 'US territory'", "hardness": "medium", "database": "world_1", "execution_match": false, "human_preference": "equivalent", "schema": "{\"world_1\":{\"tables\":{\"city\":{\"columns\":\"*, ID, Name, CountryCode, District, Population\"},\"country\":{\"columns\":\"*, Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2\"},\"countrylanguage\":{\"columns\":\"*, CountryCode, Language, IsOfficial, Percentage\"},\"sqlite_sequence\":{\"columns\":\"*, name, seq\"}},\"foreign_keys\":\"city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code\",\"primary_keys\":\"city.ID,country.Code,countrylanguage.CountryCode\"}}"}
{"gold_sql": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "pred_sql": "SELECT AVG(Highschooler.grade) FROM Highschooler  WHERE Highschooler.ID IN (SELECT friend_id FROM Friend)", "hardness": "hard", "database": "network_1", "execution_match": false, "human_preference": "equivalent", "schema": "{\"network_1\":{\"tables\":{\"Friend\":{\"columns\":\"*, student_id, friend_id\"},\"Highschooler\":{\"columns\":\"*, ID, name, grade\"},\"Likes\":{\"columns\":\"*, student_id, liked_id\"}},\"foreign_keys\":\"Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID\",\"primary_keys\":\"Highschooler.ID,Friend.student_id,Likes.student_id\"}}"}
{"gold_sql": "select distinct year from cars_data where weight between 3000 and 4000;", "pred_sql": "SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000 INTERSECT SELECT DISTINCT Year FROM cars_data WHERE Weight > 3000", "hardness": "easy", "database": "car_1", "execution_match": true, "human_preference": "equivalent", "schema": "{\"car_1\":{\"tables\":{\"car_makers\":{\"columns\":\"*, Id, Maker, FullName, Country\"},\"car_names\":{\"columns\":\"*, MakeId, Model, Make\"},\"cars_data\":{\"columns\":\"*, Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year\"},\"continents\":{\"columns\":\"*, ContId, Continent\"},\"countries\":{\"columns\":\"*, CountryId, CountryName, Continent\"},\"model_list\":{\"columns\":\"*, ModelId, Maker, Model\"}},\"foreign_keys\":\"countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId\",\"primary_keys\":\"continents.ContId,countries.CountryId,car_makers.Id,model_list.ModelId,car_names.MakeId,cars_data.Id\"}}"}
{"gold_sql": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT A.address_id, A.line_1, A.line_2, A.line_3 FROM Addresses AS A WHERE A.address_id = (SELECT S.current_address_id FROM Students AS S GROUP BY S.current_address_id ORDER BY COUNT(*) DESC LIMIT 1 )", "hardness": "extra", "database": "student_transcripts_tracking", "execution_match": false, "human_preference": "equivalent", "schema": "{\"student_transcripts_tracking\":{\"tables\":{\"Addresses\":{\"columns\":\"*, address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details\"},\"Courses\":{\"columns\":\"*, course_id, course_name, course_description, other_details\"},\"Degree_Programs\":{\"columns\":\"*, degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details\"},\"Departments\":{\"columns\":\"*, department_id, department_name, department_description, other_details\"},\"Sections\":{\"columns\":\"*, section_id, course_id, section_name, section_description, other_details\"},\"Semesters\":{\"columns\":\"*, semester_id, semester_name, semester_description, other_details\"},\"Student_Enrolment\":{\"columns\":\"*, student_enrolment_id, degree_program_id, semester_id, student_id, other_details\"},\"Student_Enrolment_Courses\":{\"columns\":\"*, student_course_id, course_id, student_enrolment_id\"},\"Students\":{\"columns\":\"*, student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details\"},\"Transcript_Contents\":{\"columns\":\"*, student_course_id, transcript_id\"},\"Transcripts\":{\"columns\":\"*, transcript_id, transcript_date, other_details\"}},\"foreign_keys\":\"Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\",\"primary_keys\":\"Addresses.address_id,Courses.course_id,Departments.department_id,Degree_Programs.degree_program_id,Sections.section_id,Semesters.semester_id,Students.student_id,Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.student_course_id,Transcripts.transcript_id\"}}"}
{"gold_sql": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )", "pred_sql": "SELECT avg(T1.age) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id", "hardness": "hard", "database": "dog_kennels", "execution_match": false, "human_preference": "equivalent", "schema": "{\"dog_kennels\":{\"tables\":{\"Breeds\":{\"columns\":\"*, breed_code, breed_name\"},\"Charges\":{\"columns\":\"*, charge_id, charge_type, charge_amount\"},\"Dogs\":{\"columns\":\"*, dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed\"},\"Owners\":{\"columns\":\"*, owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number\"},\"Professionals\":{\"columns\":\"*, professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number\"},\"Sizes\":{\"columns\":\"*, size_code, size_description\"},\"Treatment_Types\":{\"columns\":\"*, treatment_type_code, treatment_type_description\"},\"Treatments\":{\"columns\":\"*, treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment\"}},\"foreign_keys\":\"Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code\",\"primary_keys\":\"Breeds.breed_code,Charges.charge_id,Sizes.size_code,Treatment_Types.treatment_type_code,Owners.owner_id,Dogs.dog_id,Professionals.professional_id,Treatments.treatment_id\"}}"}
{"gold_sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Record_Company, COUNT(*) as count FROM orchestra GROUP BY Record_Company ORDER BY count DESC LIMIT 1", "hardness": "hard", "database": "orchestra", "execution_match": false, "human_preference": "equivalent", "schema": "{\"orchestra\":{\"tables\":{\"conductor\":{\"columns\":\"*, Conductor_ID, Name, Age, Nationality, Year_of_Work\"},\"orchestra\":{\"columns\":\"*, Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format\"},\"performance\":{\"columns\":\"*, Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share\"},\"show\":{\"columns\":\"*, Show_ID, Performance_ID, If_first_show, Result, Attendance\"}},\"foreign_keys\":\"orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID\",\"primary_keys\":\"conductor.Conductor_ID,orchestra.Orchestra_ID,performance.Performance_ID\"}}"}
{"gold_sql": "select sum(population) ,  avg(surfacearea) from country where continent  =  'north america' and surfacearea  >  3000", "pred_sql": "SELECT SUM(Population), AVG(SurfaceArea) FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000", "hardness": "hard", "database": "world_1", "execution_match": false, "human_preference": "equivalent", "schema": "{\"world_1\":{\"tables\":{\"city\":{\"columns\":\"*, ID, Name, CountryCode, District, Population\"},\"country\":{\"columns\":\"*, Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2\"},\"countrylanguage\":{\"columns\":\"*, CountryCode, Language, IsOfficial, Percentage\"},\"sqlite_sequence\":{\"columns\":\"*, name, seq\"}},\"foreign_keys\":\"city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code\",\"primary_keys\":\"city.ID,country.Code,countrylanguage.CountryCode\"}}"}
{"gold_sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "pred_sql": "SELECT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'dog' EXCEPT SELECT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat'", "hardness": "extra", "database": "pets_1", "execution_match": false, "human_preference": "equivalent", "schema": "{\"pets_1\":{\"tables\":{\"Has_Pet\":{\"columns\":\"*, StuID, PetID\"},\"Pets\":{\"columns\":\"*, PetID, PetType, pet_age, weight\"},\"Student\":{\"columns\":\"*, StuID, LName, Fname, Age, Sex, Major, Advisor, city_code\"}},\"foreign_keys\":\"Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID\",\"primary_keys\":\"Student.StuID,Pets.PetID\"}}"}
{"gold_sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T1.Name HAVING count(*) = (SELECT max(count_eval) FROM (SELECT count(*) as count_eval FROM evaluation GROUP BY Employee_ID) AS subquery)", "hardness": "extra", "database": "employee_hire_evaluation", "execution_match": true, "human_preference": "equivalent", "schema": "{\"employee_hire_evaluation\":{\"tables\":{\"employee\":{\"columns\":\"*, Employee_ID, Name, Age, City\"},\"evaluation\":{\"columns\":\"*, Employee_ID, Year_awarded, Bonus\"},\"hiring\":{\"columns\":\"*, Shop_ID, Employee_ID, Start_from, Is_full_time\"},\"shop\":{\"columns\":\"*, Shop_ID, Name, Location, District, Number_products, Manager_name\"}},\"foreign_keys\":\"hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID\",\"primary_keys\":\"employee.Employee_ID,shop.Shop_ID,hiring.Employee_ID,evaluation.Employee_ID\"}}"}
{"gold_sql": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';", "pred_sql": "SELECT avg(T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T4.Maker = 'volvo'", "hardness": "medium", "database": "car_1", "execution_match": true, "human_preference": "inequivalent", "schema": "{\"car_1\":{\"tables\":{\"car_makers\":{\"columns\":\"*, Id, Maker, FullName, Country\"},\"car_names\":{\"columns\":\"*, MakeId, Model, Make\"},\"cars_data\":{\"columns\":\"*, Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year\"},\"continents\":{\"columns\":\"*, ContId, Continent\"},\"countries\":{\"columns\":\"*, CountryId, CountryName, Continent\"},\"model_list\":{\"columns\":\"*, ModelId, Maker, Model\"}},\"foreign_keys\":\"countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId\",\"primary_keys\":\"continents.ContId,countries.CountryId,car_makers.Id,model_list.ModelId,car_names.MakeId,cars_data.Id\"}}"}
{"gold_sql": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'", "pred_sql": "SELECT count(degree_program_id) FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'engineering'", "hardness": "medium", "database": "student_transcripts_tracking", "execution_match": true, "human_preference": "equivalent", "schema": "{\"student_transcripts_tracking\":{\"tables\":{\"Addresses\":{\"columns\":\"*, address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details\"},\"Courses\":{\"columns\":\"*, course_id, course_name, course_description, other_details\"},\"Degree_Programs\":{\"columns\":\"*, degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details\"},\"Departments\":{\"columns\":\"*, department_id, department_name, department_description, other_details\"},\"Sections\":{\"columns\":\"*, section_id, course_id, section_name, section_description, other_details\"},\"Semesters\":{\"columns\":\"*, semester_id, semester_name, semester_description, other_details\"},\"Student_Enrolment\":{\"columns\":\"*, student_enrolment_id, degree_program_id, semester_id, student_id, other_details\"},\"Student_Enrolment_Courses\":{\"columns\":\"*, student_course_id, course_id, student_enrolment_id\"},\"Students\":{\"columns\":\"*, student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details\"},\"Transcript_Contents\":{\"columns\":\"*, student_course_id, transcript_id\"},\"Transcripts\":{\"columns\":\"*, transcript_id, transcript_date, other_details\"}},\"foreign_keys\":\"Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\",\"primary_keys\":\"Addresses.address_id,Courses.course_id,Departments.department_id,Degree_Programs.degree_program_id,Sections.section_id,Semesters.semester_id,Students.student_id,Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.student_course_id,Transcripts.transcript_id\"}}"}
{"gold_sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1", "pred_sql": "SELECT T1.first_name, T1.country_code  FROM players AS T1  JOIN rankings AS T2 ON T1.player_id = T2.player_id  WHERE T2.tours = (SELECT max(tours) FROM rankings)", "hardness": "hard", "database": "wta_1", "execution_match": true, "human_preference": "equivalent", "schema": "{\"wta_1\":{\"tables\":{\"matches\":{\"columns\":\"*, best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year\"},\"players\":{\"columns\":\"*, player_id, first_name, last_name, hand, birth_date, country_code\"},\"rankings\":{\"columns\":\"*, ranking_date, ranking, player_id, ranking_points, tours\"}},\"foreign_keys\":\"matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id\",\"primary_keys\":\"players.player_id\"}}"}
{"gold_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "pred_sql": "SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%'", "hardness": "medium", "database": "world_1", "execution_match": false, "human_preference": "equivalent", "schema": "{\"world_1\":{\"tables\":{\"city\":{\"columns\":\"*, ID, Name, CountryCode, District, Population\"},\"country\":{\"columns\":\"*, Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2\"},\"countrylanguage\":{\"columns\":\"*, CountryCode, Language, IsOfficial, Percentage\"},\"sqlite_sequence\":{\"columns\":\"*, name, seq\"}},\"foreign_keys\":\"city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code\",\"primary_keys\":\"city.ID,country.Code,countrylanguage.CountryCode\"}}"}
{"gold_sql": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "pred_sql": "SELECT T1.date_arrived, T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id", "hardness": "medium", "database": "dog_kennels", "execution_match": false, "human_preference": "equivalent", "schema": "{\"dog_kennels\":{\"tables\":{\"Breeds\":{\"columns\":\"*, breed_code, breed_name\"},\"Charges\":{\"columns\":\"*, charge_id, charge_type, charge_amount\"},\"Dogs\":{\"columns\":\"*, dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed\"},\"Owners\":{\"columns\":\"*, owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number\"},\"Professionals\":{\"columns\":\"*, professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number\"},\"Sizes\":{\"columns\":\"*, size_code, size_description\"},\"Treatment_Types\":{\"columns\":\"*, treatment_type_code, treatment_type_description\"},\"Treatments\":{\"columns\":\"*, treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment\"}},\"foreign_keys\":\"Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code\",\"primary_keys\":\"Breeds.breed_code,Charges.charge_id,Sizes.size_code,Treatment_Types.treatment_type_code,Owners.owner_id,Dogs.dog_id,Professionals.professional_id,Treatments.treatment_id\"}}"}
{"gold_sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "pred_sql": "SELECT first_name, middle_name, last_name FROM Students WHERE date_left IS NOT NULL ORDER BY date_left ASC LIMIT 1", "hardness": "medium", "database": "student_transcripts_tracking", "execution_match": true, "human_preference": "equivalent", "schema": "{\"student_transcripts_tracking\":{\"tables\":{\"Addresses\":{\"columns\":\"*, address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details\"},\"Courses\":{\"columns\":\"*, course_id, course_name, course_description, other_details\"},\"Degree_Programs\":{\"columns\":\"*, degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details\"},\"Departments\":{\"columns\":\"*, department_id, department_name, department_description, other_details\"},\"Sections\":{\"columns\":\"*, section_id, course_id, section_name, section_description, other_details\"},\"Semesters\":{\"columns\":\"*, semester_id, semester_name, semester_description, other_details\"},\"Student_Enrolment\":{\"columns\":\"*, student_enrolment_id, degree_program_id, semester_id, student_id, other_details\"},\"Student_Enrolment_Courses\":{\"columns\":\"*, student_course_id, course_id, student_enrolment_id\"},\"Students\":{\"columns\":\"*, student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details\"},\"Transcript_Contents\":{\"columns\":\"*, student_course_id, transcript_id\"},\"Transcripts\":{\"columns\":\"*, transcript_id, transcript_date, other_details\"}},\"foreign_keys\":\"Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\",\"primary_keys\":\"Addresses.address_id,Courses.course_id,Departments.department_id,Degree_Programs.degree_program_id,Sections.section_id,Semesters.semester_id,Students.student_id,Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.student_course_id,Transcripts.transcript_id\"}}"}
{"gold_sql": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "pred_sql": "SELECT T1.Template_Type_Code, COUNT(T2.Template_ID)  FROM Ref_Template_Types AS T1  JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T1.Template_Type_Code", "hardness": "medium", "database": "cre_Doc_Template_Mgt", "execution_match": true, "human_preference": "inequivalent", "schema": "{\"cre_Doc_Template_Mgt\":{\"tables\":{\"Documents\":{\"columns\":\"*, Document_ID, Template_ID, Document_Name, Document_Description, Other_Details\"},\"Paragraphs\":{\"columns\":\"*, Paragraph_ID, Document_ID, Paragraph_Text, Other_Details\"},\"Ref_Template_Types\":{\"columns\":\"*, Template_Type_Code, Template_Type_Description\"},\"Templates\":{\"columns\":\"*, Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details\"}},\"foreign_keys\":\"Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID\",\"primary_keys\":\"Ref_Template_Types.Template_Type_Code,Templates.Template_ID,Documents.Document_ID,Paragraphs.Paragraph_ID\"}}"}
{"gold_sql": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;", "pred_sql": "SELECT T1.Id, T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id, T1.Maker HAVING count(*) > 3", "hardness": "medium", "database": "car_1", "execution_match": false, "human_preference": "inequivalent", "schema": "{\"car_1\":{\"tables\":{\"car_makers\":{\"columns\":\"*, Id, Maker, FullName, Country\"},\"car_names\":{\"columns\":\"*, MakeId, Model, Make\"},\"cars_data\":{\"columns\":\"*, Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year\"},\"continents\":{\"columns\":\"*, ContId, Continent\"},\"countries\":{\"columns\":\"*, CountryId, CountryName, Continent\"},\"model_list\":{\"columns\":\"*, ModelId, Maker, Model\"}},\"foreign_keys\":\"countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId\",\"primary_keys\":\"continents.ContId,countries.CountryId,car_makers.Id,model_list.ModelId,car_names.MakeId,cars_data.Id\"}}"}
{"gold_sql": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"", "pred_sql": "SELECT DISTINCT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE (T2.Language = 'English' OR T2.Language = 'Dutch') AND T2.IsOfficial = 'T'", "hardness": "extra", "database": "world_1", "execution_match": false, "human_preference": "inequivalent", "schema": "{\"world_1\":{\"tables\":{\"city\":{\"columns\":\"*, ID, Name, CountryCode, District, Population\"},\"country\":{\"columns\":\"*, Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2\"},\"countrylanguage\":{\"columns\":\"*, CountryCode, Language, IsOfficial, Percentage\"},\"sqlite_sequence\":{\"columns\":\"*, name, seq\"}},\"foreign_keys\":\"city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code\",\"primary_keys\":\"city.ID,country.Code,countrylanguage.CountryCode\"}}"}
{"gold_sql": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "pred_sql": "SELECT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID", "hardness": "medium", "database": "pets_1", "execution_match": false, "human_preference": "equivalent", "schema": "{\"pets_1\":{\"tables\":{\"Has_Pet\":{\"columns\":\"*, StuID, PetID\"},\"Pets\":{\"columns\":\"*, PetID, PetType, pet_age, weight\"},\"Student\":{\"columns\":\"*, StuID, LName, Fname, Age, Sex, Major, Advisor, city_code\"}},\"foreign_keys\":\"Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID\",\"primary_keys\":\"Student.StuID,Pets.PetID\"}}"}
{"gold_sql": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT T1.address_id, T1.line_1, T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id OR T1.address_id = T2.permanent_address_id GROUP BY T1.address_id, T1.line_1, T1.line_2 ORDER BY count(*) DESC LIMIT 1", "hardness": "extra", "database": "student_transcripts_tracking", "execution_match": true, "human_preference": "inequivalent", "schema": "{\"student_transcripts_tracking\":{\"tables\":{\"Addresses\":{\"columns\":\"*, address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details\"},\"Courses\":{\"columns\":\"*, course_id, course_name, course_description, other_details\"},\"Degree_Programs\":{\"columns\":\"*, degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details\"},\"Departments\":{\"columns\":\"*, department_id, department_name, department_description, other_details\"},\"Sections\":{\"columns\":\"*, section_id, course_id, section_name, section_description, other_details\"},\"Semesters\":{\"columns\":\"*, semester_id, semester_name, semester_description, other_details\"},\"Student_Enrolment\":{\"columns\":\"*, student_enrolment_id, degree_program_id, semester_id, student_id, other_details\"},\"Student_Enrolment_Courses\":{\"columns\":\"*, student_course_id, course_id, student_enrolment_id\"},\"Students\":{\"columns\":\"*, student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details\"},\"Transcript_Contents\":{\"columns\":\"*, student_course_id, transcript_id\"},\"Transcripts\":{\"columns\":\"*, transcript_id, transcript_date, other_details\"}},\"foreign_keys\":\"Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\",\"primary_keys\":\"Addresses.address_id,Courses.course_id,Departments.department_id,Degree_Programs.degree_program_id,Sections.section_id,Semesters.semester_id,Students.student_id,Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.student_course_id,Transcripts.transcript_id\"}}"}
{"gold_sql": "SELECT Episode FROM TV_series ORDER BY rating", "pred_sql": "SELECT Episode FROM TV_series ORDER BY Rating DESC", "hardness": "easy", "database": "tvshow", "execution_match": false, "human_preference": "equivalent", "schema": "{\"tvshow\":{\"tables\":{\"Cartoon\":{\"columns\":\"*, id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel\"},\"TV_Channel\":{\"columns\":\"*, id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option\"},\"TV_series\":{\"columns\":\"*, id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel\"}},\"foreign_keys\":\"TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id\",\"primary_keys\":\"TV_Channel.id,TV_series.id,Cartoon.id\"}}"}
{"gold_sql": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "pred_sql": "SELECT min(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)", "hardness": "extra", "database": "network_1", "execution_match": true, "human_preference": "equivalent", "schema": "{\"network_1\":{\"tables\":{\"Friend\":{\"columns\":\"*, student_id, friend_id\"},\"Highschooler\":{\"columns\":\"*, ID, name, grade\"},\"Likes\":{\"columns\":\"*, student_id, liked_id\"}},\"foreign_keys\":\"Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID\",\"primary_keys\":\"Highschooler.ID,Friend.student_id,Likes.student_id\"}}"}
{"gold_sql": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';", "pred_sql": "SELECT avg(Edispl) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT Model FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Maker = 'volvo')))", "hardness": "medium", "database": "car_1", "execution_match": true, "human_preference": "equivalent", "schema": "{\"car_1\":{\"tables\":{\"car_makers\":{\"columns\":\"*, Id, Maker, FullName, Country\"},\"car_names\":{\"columns\":\"*, MakeId, Model, Make\"},\"cars_data\":{\"columns\":\"*, Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year\"},\"continents\":{\"columns\":\"*, ContId, Continent\"},\"countries\":{\"columns\":\"*, CountryId, CountryName, Continent\"},\"model_list\":{\"columns\":\"*, ModelId, Maker, Model\"}},\"foreign_keys\":\"countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId\",\"primary_keys\":\"continents.ContId,countries.CountryId,car_makers.Id,model_list.ModelId,car_names.MakeId,cars_data.Id\"}}"}
{"gold_sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "pred_sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "hardness": "easy", "database": "tvshow", "execution_match": true, "human_preference": "equivalent", "schema": "{\"tvshow\":{\"tables\":{\"Cartoon\":{\"columns\":\"*, id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel\"},\"TV_Channel\":{\"columns\":\"*, id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option\"},\"TV_series\":{\"columns\":\"*, id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel\"}},\"foreign_keys\":\"TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id\",\"primary_keys\":\"TV_Channel.id,TV_series.id,Cartoon.id\"}}"}
{"gold_sql": "SELECT charge_type ,  charge_amount FROM Charges", "pred_sql": "SELECT charge_type , sum(charge_amount) FROM Charges GROUP BY charge_type", "hardness": "medium", "database": "dog_kennels", "execution_match": true, "human_preference": "inequivalent", "schema": "{\"dog_kennels\":{\"tables\":{\"Breeds\":{\"columns\":\"*, breed_code, breed_name\"},\"Charges\":{\"columns\":\"*, charge_id, charge_type, charge_amount\"},\"Dogs\":{\"columns\":\"*, dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed\"},\"Owners\":{\"columns\":\"*, owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number\"},\"Professionals\":{\"columns\":\"*, professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number\"},\"Sizes\":{\"columns\":\"*, size_code, size_description\"},\"Treatment_Types\":{\"columns\":\"*, treatment_type_code, treatment_type_description\"},\"Treatments\":{\"columns\":\"*, treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment\"}},\"foreign_keys\":\"Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code\",\"primary_keys\":\"Breeds.breed_code,Charges.charge_id,Sizes.size_code,Treatment_Types.treatment_type_code,Owners.owner_id,Dogs.dog_id,Professionals.professional_id,Treatments.treatment_id\"}}"}
{"gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "pred_sql": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id JOIN Likes AS T3 ON T1.ID = T3.liked_id GROUP BY T1.ID, T1.name", "hardness": "hard", "database": "network_1", "execution_match": true, "human_preference": "equivalent", "schema": "{\"network_1\":{\"tables\":{\"Friend\":{\"columns\":\"*, student_id, friend_id\"},\"Highschooler\":{\"columns\":\"*, ID, name, grade\"},\"Likes\":{\"columns\":\"*, student_id, liked_id\"}},\"foreign_keys\":\"Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID\",\"primary_keys\":\"Highschooler.ID,Friend.student_id,Likes.student_id\"}}"}
{"gold_sql": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "pred_sql": "SELECT Major , Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'Cat')", "hardness": "extra", "database": "pets_1", "execution_match": false, "human_preference": "equivalent", "schema": "{\"pets_1\":{\"tables\":{\"Has_Pet\":{\"columns\":\"*, StuID, PetID\"},\"Pets\":{\"columns\":\"*, PetID, PetType, pet_age, weight\"},\"Student\":{\"columns\":\"*, StuID, LName, Fname, Age, Sex, Major, Advisor, city_code\"}},\"foreign_keys\":\"Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID\",\"primary_keys\":\"Student.StuID,Pets.PetID\"}}"}
{"gold_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "pred_sql": "SELECT FlightNo FROM flights WHERE SourceAirport = \"Aberdeen\"", "hardness": "medium", "database": "flight_2", "execution_match": true, "human_preference": "inequivalent", "schema": "{\"flight_2\":{\"tables\":{\"airlines\":{\"columns\":\"*, uid, Airline, Abbreviation, Country\"},\"airports\":{\"columns\":\"*, City, AirportCode, AirportName, Country, CountryAbbrev\"},\"flights\":{\"columns\":\"*, Airline, FlightNo, SourceAirport, DestAirport\"}},\"foreign_keys\":\"flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode\",\"primary_keys\":\"airlines.uid,airports.AirportCode,flights.Airline\"}}"}
{"gold_sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';", "pred_sql": "SELECT count(*) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'France'", "hardness": "medium", "database": "car_1", "execution_match": false, "human_preference": "equivalent", "schema": "{\"car_1\":{\"tables\":{\"car_makers\":{\"columns\":\"*, Id, Maker, FullName, Country\"},\"car_names\":{\"columns\":\"*, MakeId, Model, Make\"},\"cars_data\":{\"columns\":\"*, Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year\"},\"continents\":{\"columns\":\"*, ContId, Continent\"},\"countries\":{\"columns\":\"*, CountryId, CountryName, Continent\"},\"model_list\":{\"columns\":\"*, ModelId, Maker, Model\"}},\"foreign_keys\":\"countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId\",\"primary_keys\":\"continents.ContId,countries.CountryId,car_makers.Id,model_list.ModelId,car_names.MakeId,cars_data.Id\"}}"}
{"gold_sql": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id", "pred_sql": "SELECT last_name FROM Students WHERE current_address_id IN (SELECT address_id FROM Addresses WHERE state_province_county = 'North Carolina') AND student_id NOT IN (SELECT student_id FROM Student_Enrolment)", "hardness": "extra", "database": "student_transcripts_tracking", "execution_match": false, "human_preference": "equivalent", "schema": "{\"student_transcripts_tracking\":{\"tables\":{\"Addresses\":{\"columns\":\"*, address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details\"},\"Courses\":{\"columns\":\"*, course_id, course_name, course_description, other_details\"},\"Degree_Programs\":{\"columns\":\"*, degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details\"},\"Departments\":{\"columns\":\"*, department_id, department_name, department_description, other_details\"},\"Sections\":{\"columns\":\"*, section_id, course_id, section_name, section_description, other_details\"},\"Semesters\":{\"columns\":\"*, semester_id, semester_name, semester_description, other_details\"},\"Student_Enrolment\":{\"columns\":\"*, student_enrolment_id, degree_program_id, semester_id, student_id, other_details\"},\"Student_Enrolment_Courses\":{\"columns\":\"*, student_course_id, course_id, student_enrolment_id\"},\"Students\":{\"columns\":\"*, student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details\"},\"Transcript_Contents\":{\"columns\":\"*, student_course_id, transcript_id\"},\"Transcripts\":{\"columns\":\"*, transcript_id, transcript_date, other_details\"}},\"foreign_keys\":\"Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\",\"primary_keys\":\"Addresses.address_id,Courses.course_id,Departments.department_id,Degree_Programs.degree_program_id,Sections.section_id,Semesters.semester_id,Students.student_id,Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.student_course_id,Transcripts.transcript_id\"}}"}
{"gold_sql": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "pred_sql": "SELECT course_description FROM Courses WHERE course_name LIKE \"%math%\"", "hardness": "easy", "database": "student_transcripts_tracking", "execution_match": true, "human_preference": "equivalent", "schema": "{\"student_transcripts_tracking\":{\"tables\":{\"Addresses\":{\"columns\":\"*, address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details\"},\"Courses\":{\"columns\":\"*, course_id, course_name, course_description, other_details\"},\"Degree_Programs\":{\"columns\":\"*, degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details\"},\"Departments\":{\"columns\":\"*, department_id, department_name, department_description, other_details\"},\"Sections\":{\"columns\":\"*, section_id, course_id, section_name, section_description, other_details\"},\"Semesters\":{\"columns\":\"*, semester_id, semester_name, semester_description, other_details\"},\"Student_Enrolment\":{\"columns\":\"*, student_enrolment_id, degree_program_id, semester_id, student_id, other_details\"},\"Student_Enrolment_Courses\":{\"columns\":\"*, student_course_id, course_id, student_enrolment_id\"},\"Students\":{\"columns\":\"*, student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details\"},\"Transcript_Contents\":{\"columns\":\"*, student_course_id, transcript_id\"},\"Transcripts\":{\"columns\":\"*, transcript_id, transcript_date, other_details\"}},\"foreign_keys\":\"Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\",\"primary_keys\":\"Addresses.address_id,Courses.course_id,Departments.department_id,Degree_Programs.degree_program_id,Sections.section_id,Semesters.semester_id,Students.student_id,Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.student_course_id,Transcripts.transcript_id\"}}"}
{"gold_sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT T1.student_id, T1.first_name, T1.middle_name, T1.last_name, COUNT(T2.degree_program_id) as num_enrollments FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY num_enrollments DESC LIMIT 1", "hardness": "extra", "database": "student_transcripts_tracking", "execution_match": false, "human_preference": "equivalent", "schema": "{\"student_transcripts_tracking\":{\"tables\":{\"Addresses\":{\"columns\":\"*, address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details\"},\"Courses\":{\"columns\":\"*, course_id, course_name, course_description, other_details\"},\"Degree_Programs\":{\"columns\":\"*, degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details\"},\"Departments\":{\"columns\":\"*, department_id, department_name, department_description, other_details\"},\"Sections\":{\"columns\":\"*, section_id, course_id, section_name, section_description, other_details\"},\"Semesters\":{\"columns\":\"*, semester_id, semester_name, semester_description, other_details\"},\"Student_Enrolment\":{\"columns\":\"*, student_enrolment_id, degree_program_id, semester_id, student_id, other_details\"},\"Student_Enrolment_Courses\":{\"columns\":\"*, student_course_id, course_id, student_enrolment_id\"},\"Students\":{\"columns\":\"*, student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details\"},\"Transcript_Contents\":{\"columns\":\"*, student_course_id, transcript_id\"},\"Transcripts\":{\"columns\":\"*, transcript_id, transcript_date, other_details\"}},\"foreign_keys\":\"Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\",\"primary_keys\":\"Addresses.address_id,Courses.course_id,Departments.department_id,Degree_Programs.degree_program_id,Sections.section_id,Semesters.semester_id,Students.student_id,Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.student_course_id,Transcripts.transcript_id\"}}"}
{"gold_sql": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "pred_sql": "SELECT T2.Continent FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Name = \"Anguilla\"", "hardness": "easy", "database": "world_1", "execution_match": false, "human_preference": "inequivalent", "schema": "{\"world_1\":{\"tables\":{\"city\":{\"columns\":\"*, ID, Name, CountryCode, District, Population\"},\"country\":{\"columns\":\"*, Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2\"},\"countrylanguage\":{\"columns\":\"*, CountryCode, Language, IsOfficial, Percentage\"},\"sqlite_sequence\":{\"columns\":\"*, name, seq\"}},\"foreign_keys\":\"city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code\",\"primary_keys\":\"city.ID,country.Code,countrylanguage.CountryCode\"}}"}
{"gold_sql": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"", "pred_sql": "SELECT count(*) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'CV'", "hardness": "easy", "database": "cre_Doc_Template_Mgt", "execution_match": true, "human_preference": "inequivalent", "schema": "{\"cre_Doc_Template_Mgt\":{\"tables\":{\"Documents\":{\"columns\":\"*, Document_ID, Template_ID, Document_Name, Document_Description, Other_Details\"},\"Paragraphs\":{\"columns\":\"*, Paragraph_ID, Document_ID, Paragraph_Text, Other_Details\"},\"Ref_Template_Types\":{\"columns\":\"*, Template_Type_Code, Template_Type_Description\"},\"Templates\":{\"columns\":\"*, Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details\"}},\"foreign_keys\":\"Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID\",\"primary_keys\":\"Ref_Template_Types.Template_Type_Code,Templates.Template_ID,Documents.Document_ID,Paragraphs.Paragraph_ID\"}}"}
{"gold_sql": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;", "pred_sql": "SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.Continent = (SELECT ContId FROM continents WHERE Continent = 'Europe') GROUP BY countries.CountryName HAVING COUNT(DISTINCT car_makers.Maker) >= 3", "hardness": "extra", "database": "car_1", "execution_match": false, "human_preference": "equivalent", "schema": "{\"car_1\":{\"tables\":{\"car_makers\":{\"columns\":\"*, Id, Maker, FullName, Country\"},\"car_names\":{\"columns\":\"*, MakeId, Model, Make\"},\"cars_data\":{\"columns\":\"*, Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year\"},\"continents\":{\"columns\":\"*, ContId, Continent\"},\"countries\":{\"columns\":\"*, CountryId, CountryName, Continent\"},\"model_list\":{\"columns\":\"*, ModelId, Maker, Model\"}},\"foreign_keys\":\"countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId\",\"primary_keys\":\"continents.ContId,countries.CountryId,car_makers.Id,model_list.ModelId,car_names.MakeId,cars_data.Id\"}}"}
{"gold_sql": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "pred_sql": "SELECT H.name, COUNT(*) FROM Highschooler H JOIN Likes L ON H.ID = L.student_id GROUP BY H.name", "hardness": "medium", "database": "network_1", "execution_match": false, "human_preference": "equivalent", "schema": "{\"network_1\":{\"tables\":{\"Friend\":{\"columns\":\"*, student_id, friend_id\"},\"Highschooler\":{\"columns\":\"*, ID, name, grade\"},\"Likes\":{\"columns\":\"*, student_id, liked_id\"}},\"foreign_keys\":\"Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID\",\"primary_keys\":\"Highschooler.ID,Friend.student_id,Likes.student_id\"}}"}
{"gold_sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "pred_sql": "SELECT count(*) FROM student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'Dog' AND T1.Sex = 'F'", "hardness": "hard", "database": "pets_1", "execution_match": false, "human_preference": "equivalent", "schema": "{\"pets_1\":{\"tables\":{\"Has_Pet\":{\"columns\":\"*, StuID, PetID\"},\"Pets\":{\"columns\":\"*, PetID, PetType, pet_age, weight\"},\"Student\":{\"columns\":\"*, StuID, LName, Fname, Age, Sex, Major, Advisor, city_code\"}},\"foreign_keys\":\"Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID\",\"primary_keys\":\"Student.StuID,Pets.PetID\"}}"}
{"gold_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "pred_sql": "SELECT avg(`LifeExpectancy`) FROM `country` WHERE `Continent` = 'Africa' AND `GovernmentForm` LIKE '%Republic%'", "hardness": "medium", "database": "world_1", "execution_match": false, "human_preference": "equivalent", "schema": "{\"world_1\":{\"tables\":{\"city\":{\"columns\":\"*, ID, Name, CountryCode, District, Population\"},\"country\":{\"columns\":\"*, Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2\"},\"countrylanguage\":{\"columns\":\"*, CountryCode, Language, IsOfficial, Percentage\"},\"sqlite_sequence\":{\"columns\":\"*, name, seq\"}},\"foreign_keys\":\"city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code\",\"primary_keys\":\"city.ID,country.Code,countrylanguage.CountryCode\"}}"}
{"gold_sql": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')", "pred_sql": "SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND (countrylanguage.Language <> 'English' OR countrylanguage.IsOfficial = 'F')", "hardness": "extra", "database": "world_1", "execution_match": false, "human_preference": "equivalent", "schema": "{\"world_1\":{\"tables\":{\"city\":{\"columns\":\"*, ID, Name, CountryCode, District, Population\"},\"country\":{\"columns\":\"*, Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2\"},\"countrylanguage\":{\"columns\":\"*, CountryCode, Language, IsOfficial, Percentage\"},\"sqlite_sequence\":{\"columns\":\"*, name, seq\"}},\"foreign_keys\":\"city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code\",\"primary_keys\":\"city.ID,country.Code,countrylanguage.CountryCode\"}}"}
{"gold_sql": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "pred_sql": "SELECT T1.Name, T1.Song_release_year FROM singer AS T1 ORDER BY T1.Age ASC LIMIT 1", "hardness": "medium", "database": "concert_singer", "execution_match": false, "human_preference": "inequivalent", "schema": "{\"concert_singer\":{\"tables\":{\"concert\":{\"columns\":\"*, concert_ID, concert_Name, Theme, Stadium_ID, Year\"},\"singer\":{\"columns\":\"*, Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male\"},\"singer_in_concert\":{\"columns\":\"*, concert_ID, Singer_ID\"},\"stadium\":{\"columns\":\"*, Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average\"}},\"foreign_keys\":\"concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID\",\"primary_keys\":\"stadium.Stadium_ID,singer.Singer_ID,concert.concert_ID,singer_in_concert.concert_ID\"}}"}
{"gold_sql": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000", "pred_sql": "SELECT sum(Population) , avg(SurfaceArea) FROM country WHERE Continent = \"North America\" AND SurfaceArea > 3000", "hardness": "hard", "database": "world_1", "execution_match": false, "human_preference": "equivalent", "schema": "{\"world_1\":{\"tables\":{\"city\":{\"columns\":\"*, ID, Name, CountryCode, District, Population\"},\"country\":{\"columns\":\"*, Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2\"},\"countrylanguage\":{\"columns\":\"*, CountryCode, Language, IsOfficial, Percentage\"},\"sqlite_sequence\":{\"columns\":\"*, name, seq\"}},\"foreign_keys\":\"city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code\",\"primary_keys\":\"city.ID,country.Code,countrylanguage.CountryCode\"}}"}
{"gold_sql": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT T1.id, T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T1.id ORDER BY SUM(T2.injured) DESC LIMIT 1", "hardness": "extra", "database": "battle_death", "execution_match": false, "human_preference": "inequivalent", "schema": "{\"battle_death\":{\"tables\":{\"battle\":{\"columns\":\"*, id, name, date, bulgarian_commander, latin_commander, result\"},\"death\":{\"columns\":\"*, caused_by_ship_id, id, note, killed, injured\"},\"ship\":{\"columns\":\"*, lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship\"}},\"foreign_keys\":\"ship.lost_in_battle = battle.id,death.caused_by_ship_id = ship.id\",\"primary_keys\":\"battle.id,ship.id,death.id\"}}"}
{"gold_sql": "SELECT mpg FROM CARS_DATA WHERE Cylinders  =  8 OR YEAR  <  1980 ORDER BY mpg DESC LIMIT 1;", "pred_sql": "SELECT Max(cars_data.MPG) FROM cars_data WHERE cars_data.Cylinders = 'terminal' OR cars_data.Year < 'terminal' ", "hardness": "", "database": "car_1", "execution_match": false, "human_preference": "inequivalent", "schema": "{\"car_1\":{\"tables\":{\"car_makers\":{\"columns\":\"*, Id, Maker, FullName, Country\"},\"car_names\":{\"columns\":\"*, MakeId, Model, Make\"},\"cars_data\":{\"columns\":\"*, Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year\"},\"continents\":{\"columns\":\"*, ContId, Continent\"},\"countries\":{\"columns\":\"*, CountryId, CountryName, Continent\"},\"model_list\":{\"columns\":\"*, ModelId, Maker, Model\"}},\"foreign_keys\":\"countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId\",\"primary_keys\":\"continents.ContId,countries.CountryId,car_makers.Id,model_list.ModelId,car_names.MakeId,cars_data.Id\"}}"}
{"gold_sql": " SELECT avg(age) FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid) ", "pred_sql": " SELECT avg( Age ) FROM Student WHERE StuID NOT IN ( SELECT StuID FROM Has_Pet ) ", "hardness": "", "database": "pets_1", "execution_match": false, "human_preference": "equivalent", "schema": "{\"pets_1\":{\"tables\":{\"Has_Pet\":{\"columns\":\"*, StuID, PetID\"},\"Pets\":{\"columns\":\"*, PetID, PetType, pet_age, weight\"},\"Student\":{\"columns\":\"*, StuID, LName, Fname, Age, Sex, Major, Advisor, city_code\"}},\"foreign_keys\":\"Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID\",\"primary_keys\":\"Student.StuID,Pets.PetID\"}}"}
{"gold_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "pred_sql": "SELECT T2.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 4 ORDER BY T1.Horsepower DESC LIMIT 1", "hardness": "extra", "database": "car_1", "execution_match": true, "human_preference": "equivalent", "schema": "{\"car_1\":{\"tables\":{\"car_makers\":{\"columns\":\"*, Id, Maker, FullName, Country\"},\"car_names\":{\"columns\":\"*, MakeId, Model, Make\"},\"cars_data\":{\"columns\":\"*, Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year\"},\"continents\":{\"columns\":\"*, ContId, Continent\"},\"countries\":{\"columns\":\"*, CountryId, CountryName, Continent\"},\"model_list\":{\"columns\":\"*, ModelId, Maker, Model\"}},\"foreign_keys\":\"countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId\",\"primary_keys\":\"continents.ContId,countries.CountryId,car_makers.Id,model_list.ModelId,car_names.MakeId,cars_data.Id\"}}"}
{"gold_sql": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")", "pred_sql": "SELECT sum(Population) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')", "hardness": "extra", "database": "world_1", "execution_match": true, "human_preference": "equivalent", "schema": "{\"world_1\":{\"tables\":{\"city\":{\"columns\":\"*, ID, Name, CountryCode, District, Population\"},\"country\":{\"columns\":\"*, Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2\"},\"countrylanguage\":{\"columns\":\"*, CountryCode, Language, IsOfficial, Percentage\"},\"sqlite_sequence\":{\"columns\":\"*, name, seq\"}},\"foreign_keys\":\"city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code\",\"primary_keys\":\"city.ID,country.Code,countrylanguage.CountryCode\"}}"}
{"gold_sql": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id ORDER BY count(T2.student_course_id) DESC LIMIT 1", "hardness": "extra", "database": "student_transcripts_tracking", "execution_match": false, "human_preference": "equivalent", "schema": "{\"student_transcripts_tracking\":{\"tables\":{\"Addresses\":{\"columns\":\"*, address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details\"},\"Courses\":{\"columns\":\"*, course_id, course_name, course_description, other_details\"},\"Degree_Programs\":{\"columns\":\"*, degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details\"},\"Departments\":{\"columns\":\"*, department_id, department_name, department_description, other_details\"},\"Sections\":{\"columns\":\"*, section_id, course_id, section_name, section_description, other_details\"},\"Semesters\":{\"columns\":\"*, semester_id, semester_name, semester_description, other_details\"},\"Student_Enrolment\":{\"columns\":\"*, student_enrolment_id, degree_program_id, semester_id, student_id, other_details\"},\"Student_Enrolment_Courses\":{\"columns\":\"*, student_course_id, course_id, student_enrolment_id\"},\"Students\":{\"columns\":\"*, student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details\"},\"Transcript_Contents\":{\"columns\":\"*, student_course_id, transcript_id\"},\"Transcripts\":{\"columns\":\"*, transcript_id, transcript_date, other_details\"}},\"foreign_keys\":\"Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\",\"primary_keys\":\"Addresses.address_id,Courses.course_id,Departments.department_id,Degree_Programs.degree_program_id,Sections.section_id,Semesters.semester_id,Students.student_id,Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.student_course_id,Transcripts.transcript_id\"}}"}
{"gold_sql": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;", "pred_sql": "SELECT T1.Id, T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id, T1.Maker HAVING count(*) >= 2 AND count(*) > 3", "hardness": "extra", "database": "concert_singer", "execution_match": false, "human_preference": "equivalent", "schema": "{\"concert_singer\":{\"tables\":{\"concert\":{\"columns\":\"*, concert_ID, concert_Name, Theme, Stadium_ID, Year\"},\"singer\":{\"columns\":\"*, Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male\"},\"singer_in_concert\":{\"columns\":\"*, concert_ID, Singer_ID\"},\"stadium\":{\"columns\":\"*, Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average\"}},\"foreign_keys\":\"concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID\",\"primary_keys\":\"stadium.Stadium_ID,singer.Singer_ID,concert.concert_ID,singer_in_concert.concert_ID\"}}"}
{"gold_sql": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "pred_sql": "SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population ASC LIMIT 1", "hardness": "medium", "database": "world_1", "execution_match": true, "human_preference": "equivalent", "schema": "{\"world_1\":{\"tables\":{\"city\":{\"columns\":\"*, ID, Name, CountryCode, District, Population\"},\"country\":{\"columns\":\"*, Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2\"},\"countrylanguage\":{\"columns\":\"*, CountryCode, Language, IsOfficial, Percentage\"},\"sqlite_sequence\":{\"columns\":\"*, name, seq\"}},\"foreign_keys\":\"city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code\",\"primary_keys\":\"city.ID,country.Code,countrylanguage.CountryCode\"}}"}
{"gold_sql": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")", "pred_sql": "SELECT Name FROM country WHERE SurfaceArea > (SELECT max(SurfaceArea) FROM country WHERE Continent = 'Europe')", "hardness": "hard", "database": "world_1", "execution_match": false, "human_preference": "inequivalent", "schema": "{\"world_1\":{\"tables\":{\"city\":{\"columns\":\"*, ID, Name, CountryCode, District, Population\"},\"country\":{\"columns\":\"*, Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2\"},\"countrylanguage\":{\"columns\":\"*, CountryCode, Language, IsOfficial, Percentage\"},\"sqlite_sequence\":{\"columns\":\"*, name, seq\"}},\"foreign_keys\":\"city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code\",\"primary_keys\":\"city.ID,country.Code,countrylanguage.CountryCode\"}}"}
{"gold_sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "pred_sql": "SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height = (SELECT max(Height) FROM people)", "hardness": "hard", "database": "poker_player", "execution_match": true, "human_preference": "equivalent", "schema": "{\"poker_player\":{\"tables\":{\"people\":{\"columns\":\"*, People_ID, Nationality, Name, Birth_Date, Height\"},\"poker_player\":{\"columns\":\"*, Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings\"}},\"foreign_keys\":\"poker_player.People_ID = people.People_ID\",\"primary_keys\":\"poker_player.Poker_Player_ID,people.People_ID\"}}"}
{"gold_sql": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals", "pred_sql": "SELECT T1.state FROM Owners AS T1 JOIN Professionals AS T2 ON T1.state  =  T2.state GROUP BY T1.state", "hardness": "hard", "database": "world_1", "execution_match": true, "human_preference": "equivalent", "schema": "{\"world_1\":{\"tables\":{\"city\":{\"columns\":\"*, ID, Name, CountryCode, District, Population\"},\"country\":{\"columns\":\"*, Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2\"},\"countrylanguage\":{\"columns\":\"*, CountryCode, Language, IsOfficial, Percentage\"},\"sqlite_sequence\":{\"columns\":\"*, name, seq\"}},\"foreign_keys\":\"city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code\",\"primary_keys\":\"city.ID,country.Code,countrylanguage.CountryCode\"}}"}